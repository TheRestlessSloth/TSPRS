
Prog.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000114  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000114  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000144  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000180  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000630  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000597  00000000  00000000  000007d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000252  00000000  00000000  00000d67  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000fbc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000349  00000000  00000000  00000fe0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000046  00000000  00000000  00001329  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000136f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 5e 00 	jmp	0xbc	; 0xbc <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/io.h>
#include <util/delay.h>

int main(void)
{
	ASSR = 0x00;
  6c:	12 bc       	out	0x22, r1	; 34
	
	TCCR0= 0b01101001;
  6e:	89 e6       	ldi	r24, 0x69	; 105
  70:	83 bf       	out	0x33, r24	; 51
	
	TCNT0 = 0x00;
  72:	12 be       	out	0x32, r1	; 50
	OCR0 = 0x00;
  74:	1c be       	out	0x3c, r1	; 60
	TIMSK = 0x00;
  76:	19 be       	out	0x39, r1	; 57
	
	DDRB = 0xFF;
  78:	8f ef       	ldi	r24, 0xFF	; 255
  7a:	87 bb       	out	0x17, r24	; 23
	PORTB = 0x00;
  7c:	18 ba       	out	0x18, r1	; 24
	OCR0 = 0x00;
  7e:	1c be       	out	0x3c, r1	; 60
   while (1) 
    {
		while(OCR0<255)
  80:	8c b7       	in	r24, 0x3c	; 60
  82:	8f 3f       	cpi	r24, 0xFF	; 255
  84:	21 f4       	brne	.+8      	; 0x8e <main+0x22>
		{
			OCR0 += 1;
			_delay_ms(2);
		}
		
		while(OCR0>0x00)
  86:	8c b7       	in	r24, 0x3c	; 60
  88:	81 11       	cpse	r24, r1
  8a:	0b c0       	rjmp	.+22     	; 0xa2 <main+0x36>
  8c:	f9 cf       	rjmp	.-14     	; 0x80 <main+0x14>
	OCR0 = 0x00;
   while (1) 
    {
		while(OCR0<255)
		{
			OCR0 += 1;
  8e:	8c b7       	in	r24, 0x3c	; 60
  90:	8f 5f       	subi	r24, 0xFF	; 255
  92:	8c bf       	out	0x3c, r24	; 60
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  94:	8f e3       	ldi	r24, 0x3F	; 63
  96:	9f e1       	ldi	r25, 0x1F	; 31
  98:	01 97       	sbiw	r24, 0x01	; 1
  9a:	f1 f7       	brne	.-4      	; 0x98 <main+0x2c>
  9c:	00 c0       	rjmp	.+0      	; 0x9e <main+0x32>
  9e:	00 00       	nop
  a0:	ef cf       	rjmp	.-34     	; 0x80 <main+0x14>
			_delay_ms(2);
		}
		
		while(OCR0>0x00)
		{
			OCR0 -= 1;
  a2:	8c b7       	in	r24, 0x3c	; 60
  a4:	81 50       	subi	r24, 0x01	; 1
  a6:	8c bf       	out	0x3c, r24	; 60
  a8:	8f e3       	ldi	r24, 0x3F	; 63
  aa:	9f e1       	ldi	r25, 0x1F	; 31
  ac:	01 97       	sbiw	r24, 0x01	; 1
  ae:	f1 f7       	brne	.-4      	; 0xac <main+0x40>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <main+0x46>
  b2:	00 00       	nop
		{
			OCR0 += 1;
			_delay_ms(2);
		}
		
		while(OCR0>0x00)
  b4:	8c b7       	in	r24, 0x3c	; 60
  b6:	81 11       	cpse	r24, r1
  b8:	f4 cf       	rjmp	.-24     	; 0xa2 <main+0x36>
  ba:	e2 cf       	rjmp	.-60     	; 0x80 <main+0x14>

000000bc <_exit>:
  bc:	f8 94       	cli

000000be <__stop_program>:
  be:	ff cf       	rjmp	.-2      	; 0xbe <__stop_program>
