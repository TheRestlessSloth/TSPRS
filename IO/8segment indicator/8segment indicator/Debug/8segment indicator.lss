
8segment indicator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  00000124  00000198  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000124  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001dc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006b3  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000623  00000000  00000000  000008ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001bc  00000000  00000000  00000f12  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000010d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000037d  00000000  00000000  00001104  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000048  00000000  00000000  00001481  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000014c9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e2       	ldi	r30, 0x24	; 36
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 31       	cpi	r26, 0x14	; 20
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 90 00 	jmp	0x120	; 0x120 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:

int seq[10] = {0b10100000, 0b10111011, 0b01100010, 0b00101010, 0b00111001, 0b00101100, 0b00100100, 0b10111010, 0b00100000, 0b00101000};

//f-0, a-1, b-2, e-3, d-4, dot-5,c-6, g-7
int main(void)
{
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	00 d0       	rcall	.+0      	; 0x9c <main+0x6>
  9c:	cd b7       	in	r28, 0x3d	; 61
  9e:	de b7       	in	r29, 0x3e	; 62
    DDRB = 0xFF;
  a0:	84 e2       	ldi	r24, 0x24	; 36
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	2f ef       	ldi	r18, 0xFF	; 255
  a6:	fc 01       	movw	r30, r24
  a8:	20 83       	st	Z, r18
	DDRD = 0xFF;
  aa:	8a e2       	ldi	r24, 0x2A	; 42
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	2f ef       	ldi	r18, 0xFF	; 255
  b0:	fc 01       	movw	r30, r24
  b2:	20 83       	st	Z, r18
	/* Replace with your application code */
	PORTB = 1;
  b4:	85 e2       	ldi	r24, 0x25	; 37
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	21 e0       	ldi	r18, 0x01	; 1
  ba:	fc 01       	movw	r30, r24
  bc:	20 83       	st	Z, r18
    
	while (1) 
    { 

		for(int i = 0; i<9; i++)
  be:	1a 82       	std	Y+2, r1	; 0x02
  c0:	19 82       	std	Y+1, r1	; 0x01
  c2:	89 81       	ldd	r24, Y+1	; 0x01
  c4:	9a 81       	ldd	r25, Y+2	; 0x02
  c6:	09 97       	sbiw	r24, 0x09	; 9
  c8:	d4 f7       	brge	.-12     	; 0xbe <main+0x28>
		{
			if(PORTB > 4)
  ca:	85 e2       	ldi	r24, 0x25	; 37
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	fc 01       	movw	r30, r24
  d0:	90 81       	ld	r25, Z
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	95 30       	cpi	r25, 0x05	; 5
  d6:	08 f4       	brcc	.+2      	; 0xda <main+0x44>
  d8:	80 e0       	ldi	r24, 0x00	; 0
  da:	88 23       	and	r24, r24
  dc:	29 f0       	breq	.+10     	; 0xe8 <main+0x52>
				PORTB = 1;
  de:	85 e2       	ldi	r24, 0x25	; 37
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	21 e0       	ldi	r18, 0x01	; 1
  e4:	fc 01       	movw	r30, r24
  e6:	20 83       	st	Z, r18
			
			PORTD = seq[i];
  e8:	8b e2       	ldi	r24, 0x2B	; 43
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	29 81       	ldd	r18, Y+1	; 0x01
  ee:	3a 81       	ldd	r19, Y+2	; 0x02
  f0:	22 0f       	add	r18, r18
  f2:	33 1f       	adc	r19, r19
  f4:	20 50       	subi	r18, 0x00	; 0
  f6:	3f 4f       	sbci	r19, 0xFF	; 255
  f8:	f9 01       	movw	r30, r18
  fa:	20 81       	ld	r18, Z
  fc:	31 81       	ldd	r19, Z+1	; 0x01
  fe:	fc 01       	movw	r30, r24
 100:	20 83       	st	Z, r18
			PORTB = PORTB << 1;
 102:	85 e2       	ldi	r24, 0x25	; 37
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	25 e2       	ldi	r18, 0x25	; 37
 108:	30 e0       	ldi	r19, 0x00	; 0
 10a:	f9 01       	movw	r30, r18
 10c:	20 81       	ld	r18, Z
 10e:	22 0f       	add	r18, r18
 110:	fc 01       	movw	r30, r24
 112:	20 83       	st	Z, r18
	PORTB = 1;
    
	while (1) 
    { 

		for(int i = 0; i<9; i++)
 114:	89 81       	ldd	r24, Y+1	; 0x01
 116:	9a 81       	ldd	r25, Y+2	; 0x02
 118:	01 96       	adiw	r24, 0x01	; 1
 11a:	9a 83       	std	Y+2, r25	; 0x02
 11c:	89 83       	std	Y+1, r24	; 0x01
 11e:	d1 cf       	rjmp	.-94     	; 0xc2 <main+0x2c>

00000120 <_exit>:
 120:	f8 94       	cli

00000122 <__stop_program>:
 122:	ff cf       	rjmp	.-2      	; 0x122 <__stop_program>
