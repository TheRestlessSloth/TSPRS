
8segment indicator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000602  00000676  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000602  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000067c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006ac  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000006ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000084a  00000000  00000000  0000070c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000066a  00000000  00000000  00000f56  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000364  00000000  00000000  000015c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001924  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b4  00000000  00000000  00001958  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000047  00000000  00000000  00001d0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001d53  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e0       	ldi	r30, 0x02	; 2
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 30       	cpi	r26, 0x06	; 6
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e0       	ldi	r26, 0x06	; 6
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 30       	cpi	r26, 0x06	; 6
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 ff 02 	jmp	0x5fe	; 0x5fe <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:

int Bd = 0b00100000;
int Bb = 0b00000000;

int main(void)
{
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	de b7       	in	r29, 0x3e	; 62
  ae:	aa 97       	sbiw	r28, 0x2a	; 42
  b0:	0f b6       	in	r0, 0x3f	; 63
  b2:	f8 94       	cli
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	0f be       	out	0x3f, r0	; 63
  b8:	cd bf       	out	0x3d, r28	; 61
    DDRB = 0xFF;
  ba:	84 e2       	ldi	r24, 0x24	; 36
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	2f ef       	ldi	r18, 0xFF	; 255
  c0:	fc 01       	movw	r30, r24
  c2:	20 83       	st	Z, r18
	DDRD = 0xFF;
  c4:	8a e2       	ldi	r24, 0x2A	; 42
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	2f ef       	ldi	r18, 0xFF	; 255
  ca:	fc 01       	movw	r30, r24
  cc:	20 83       	st	Z, r18
	/* Replace with your application code */
    while (1) 
    { 
	PORTB = 4;
  ce:	85 e2       	ldi	r24, 0x25	; 37
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	24 e0       	ldi	r18, 0x04	; 4
  d4:	fc 01       	movw	r30, r24
  d6:	20 83       	st	Z, r18
	PORTD = A;
  d8:	8b e2       	ldi	r24, 0x2B	; 43
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	20 e6       	ldi	r18, 0x60	; 96
  de:	fc 01       	movw	r30, r24
  e0:	20 83       	st	Z, r18
  e2:	80 e0       	ldi	r24, 0x00	; 0
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	a0 e2       	ldi	r26, 0x20	; 32
  e8:	b1 e4       	ldi	r27, 0x41	; 65
  ea:	89 83       	std	Y+1, r24	; 0x01
  ec:	9a 83       	std	Y+2, r25	; 0x02
  ee:	ab 83       	std	Y+3, r26	; 0x03
  f0:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
  f2:	20 e0       	ldi	r18, 0x00	; 0
  f4:	30 e0       	ldi	r19, 0x00	; 0
  f6:	4a e7       	ldi	r20, 0x7A	; 122
  f8:	55 e4       	ldi	r21, 0x45	; 69
  fa:	69 81       	ldd	r22, Y+1	; 0x01
  fc:	7a 81       	ldd	r23, Y+2	; 0x02
  fe:	8b 81       	ldd	r24, Y+3	; 0x03
 100:	9c 81       	ldd	r25, Y+4	; 0x04
 102:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <__mulsf3>
 106:	dc 01       	movw	r26, r24
 108:	cb 01       	movw	r24, r22
 10a:	89 a3       	std	Y+33, r24	; 0x21
 10c:	9a a3       	std	Y+34, r25	; 0x22
 10e:	ab a3       	std	Y+35, r26	; 0x23
 110:	bc a3       	std	Y+36, r27	; 0x24
	if (__tmp < 1.0)
 112:	20 e0       	ldi	r18, 0x00	; 0
 114:	30 e0       	ldi	r19, 0x00	; 0
 116:	40 e8       	ldi	r20, 0x80	; 128
 118:	5f e3       	ldi	r21, 0x3F	; 63
 11a:	69 a1       	ldd	r22, Y+33	; 0x21
 11c:	7a a1       	ldd	r23, Y+34	; 0x22
 11e:	8b a1       	ldd	r24, Y+35	; 0x23
 120:	9c a1       	ldd	r25, Y+36	; 0x24
 122:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <__cmpsf2>
 126:	88 23       	and	r24, r24
 128:	2c f4       	brge	.+10     	; 0x134 <main+0x8e>
		__ticks = 1;
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	9e a3       	std	Y+38, r25	; 0x26
 130:	8d a3       	std	Y+37, r24	; 0x25
 132:	3e c0       	rjmp	.+124    	; 0x1b0 <main+0x10a>
	else if (__tmp > 65535)
 134:	20 e0       	ldi	r18, 0x00	; 0
 136:	3f ef       	ldi	r19, 0xFF	; 255
 138:	4f e7       	ldi	r20, 0x7F	; 127
 13a:	57 e4       	ldi	r21, 0x47	; 71
 13c:	69 a1       	ldd	r22, Y+33	; 0x21
 13e:	7a a1       	ldd	r23, Y+34	; 0x22
 140:	8b a1       	ldd	r24, Y+35	; 0x23
 142:	9c a1       	ldd	r25, Y+36	; 0x24
 144:	0e 94 65 02 	call	0x4ca	; 0x4ca <__gesf2>
 148:	18 16       	cp	r1, r24
 14a:	44 f5       	brge	.+80     	; 0x19c <main+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 14c:	20 e0       	ldi	r18, 0x00	; 0
 14e:	30 e0       	ldi	r19, 0x00	; 0
 150:	40 e2       	ldi	r20, 0x20	; 32
 152:	51 e4       	ldi	r21, 0x41	; 65
 154:	69 81       	ldd	r22, Y+1	; 0x01
 156:	7a 81       	ldd	r23, Y+2	; 0x02
 158:	8b 81       	ldd	r24, Y+3	; 0x03
 15a:	9c 81       	ldd	r25, Y+4	; 0x04
 15c:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <__mulsf3>
 160:	dc 01       	movw	r26, r24
 162:	cb 01       	movw	r24, r22
 164:	bc 01       	movw	r22, r24
 166:	cd 01       	movw	r24, r26
 168:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <__fixunssfsi>
 16c:	dc 01       	movw	r26, r24
 16e:	cb 01       	movw	r24, r22
 170:	9e a3       	std	Y+38, r25	; 0x26
 172:	8d a3       	std	Y+37, r24	; 0x25
		while(__ticks)
 174:	8d a1       	ldd	r24, Y+37	; 0x25
 176:	9e a1       	ldd	r25, Y+38	; 0x26
 178:	89 2b       	or	r24, r25
 17a:	21 f1       	breq	.+72     	; 0x1c4 <main+0x11e>
 17c:	80 e9       	ldi	r24, 0x90	; 144
 17e:	91 e0       	ldi	r25, 0x01	; 1
 180:	98 a7       	std	Y+40, r25	; 0x28
 182:	8f a3       	std	Y+39, r24	; 0x27
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
 184:	8f a1       	ldd	r24, Y+39	; 0x27
 186:	98 a5       	ldd	r25, Y+40	; 0x28
 188:	01 97       	sbiw	r24, 0x01	; 1
 18a:	f1 f7       	brne	.-4      	; 0x188 <main+0xe2>
 18c:	98 a7       	std	Y+40, r25	; 0x28
 18e:	8f a3       	std	Y+39, r24	; 0x27
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 190:	8d a1       	ldd	r24, Y+37	; 0x25
 192:	9e a1       	ldd	r25, Y+38	; 0x26
 194:	01 97       	sbiw	r24, 0x01	; 1
 196:	9e a3       	std	Y+38, r25	; 0x26
 198:	8d a3       	std	Y+37, r24	; 0x25
 19a:	ec cf       	rjmp	.-40     	; 0x174 <main+0xce>
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 19c:	69 a1       	ldd	r22, Y+33	; 0x21
 19e:	7a a1       	ldd	r23, Y+34	; 0x22
 1a0:	8b a1       	ldd	r24, Y+35	; 0x23
 1a2:	9c a1       	ldd	r25, Y+36	; 0x24
 1a4:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <__fixunssfsi>
 1a8:	dc 01       	movw	r26, r24
 1aa:	cb 01       	movw	r24, r22
 1ac:	9e a3       	std	Y+38, r25	; 0x26
 1ae:	8d a3       	std	Y+37, r24	; 0x25
 1b0:	8d a1       	ldd	r24, Y+37	; 0x25
 1b2:	9e a1       	ldd	r25, Y+38	; 0x26
 1b4:	9a a7       	std	Y+42, r25	; 0x2a
 1b6:	89 a7       	std	Y+41, r24	; 0x29
 1b8:	89 a5       	ldd	r24, Y+41	; 0x29
 1ba:	9a a5       	ldd	r25, Y+42	; 0x2a
 1bc:	01 97       	sbiw	r24, 0x01	; 1
 1be:	f1 f7       	brne	.-4      	; 0x1bc <main+0x116>
 1c0:	9a a7       	std	Y+42, r25	; 0x2a
 1c2:	89 a7       	std	Y+41, r24	; 0x29
	_delay_ms(delay_time);
	
	PORTB = 1+Tb;
 1c4:	85 e2       	ldi	r24, 0x25	; 37
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <Tb>
 1cc:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <Tb+0x1>
 1d0:	2f 5f       	subi	r18, 0xFF	; 255
 1d2:	fc 01       	movw	r30, r24
 1d4:	20 83       	st	Z, r18
	PORTD = Td;
 1d6:	8b e2       	ldi	r24, 0x2B	; 43
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <Td>
 1de:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <Td+0x1>
 1e2:	fc 01       	movw	r30, r24
 1e4:	20 83       	st	Z, r18
 1e6:	80 e0       	ldi	r24, 0x00	; 0
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	a0 e2       	ldi	r26, 0x20	; 32
 1ec:	b1 e4       	ldi	r27, 0x41	; 65
 1ee:	8d 83       	std	Y+5, r24	; 0x05
 1f0:	9e 83       	std	Y+6, r25	; 0x06
 1f2:	af 83       	std	Y+7, r26	; 0x07
 1f4:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 1f6:	20 e0       	ldi	r18, 0x00	; 0
 1f8:	30 e0       	ldi	r19, 0x00	; 0
 1fa:	4a e7       	ldi	r20, 0x7A	; 122
 1fc:	55 e4       	ldi	r21, 0x45	; 69
 1fe:	6d 81       	ldd	r22, Y+5	; 0x05
 200:	7e 81       	ldd	r23, Y+6	; 0x06
 202:	8f 81       	ldd	r24, Y+7	; 0x07
 204:	98 85       	ldd	r25, Y+8	; 0x08
 206:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <__mulsf3>
 20a:	dc 01       	movw	r26, r24
 20c:	cb 01       	movw	r24, r22
 20e:	8f 8b       	std	Y+23, r24	; 0x17
 210:	98 8f       	std	Y+24, r25	; 0x18
 212:	a9 8f       	std	Y+25, r26	; 0x19
 214:	ba 8f       	std	Y+26, r27	; 0x1a
	if (__tmp < 1.0)
 216:	20 e0       	ldi	r18, 0x00	; 0
 218:	30 e0       	ldi	r19, 0x00	; 0
 21a:	40 e8       	ldi	r20, 0x80	; 128
 21c:	5f e3       	ldi	r21, 0x3F	; 63
 21e:	6f 89       	ldd	r22, Y+23	; 0x17
 220:	78 8d       	ldd	r23, Y+24	; 0x18
 222:	89 8d       	ldd	r24, Y+25	; 0x19
 224:	9a 8d       	ldd	r25, Y+26	; 0x1a
 226:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <__cmpsf2>
 22a:	88 23       	and	r24, r24
 22c:	2c f4       	brge	.+10     	; 0x238 <main+0x192>
		__ticks = 1;
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	9c 8f       	std	Y+28, r25	; 0x1c
 234:	8b 8f       	std	Y+27, r24	; 0x1b
 236:	3e c0       	rjmp	.+124    	; 0x2b4 <main+0x20e>
	else if (__tmp > 65535)
 238:	20 e0       	ldi	r18, 0x00	; 0
 23a:	3f ef       	ldi	r19, 0xFF	; 255
 23c:	4f e7       	ldi	r20, 0x7F	; 127
 23e:	57 e4       	ldi	r21, 0x47	; 71
 240:	6f 89       	ldd	r22, Y+23	; 0x17
 242:	78 8d       	ldd	r23, Y+24	; 0x18
 244:	89 8d       	ldd	r24, Y+25	; 0x19
 246:	9a 8d       	ldd	r25, Y+26	; 0x1a
 248:	0e 94 65 02 	call	0x4ca	; 0x4ca <__gesf2>
 24c:	18 16       	cp	r1, r24
 24e:	44 f5       	brge	.+80     	; 0x2a0 <main+0x1fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 250:	20 e0       	ldi	r18, 0x00	; 0
 252:	30 e0       	ldi	r19, 0x00	; 0
 254:	40 e2       	ldi	r20, 0x20	; 32
 256:	51 e4       	ldi	r21, 0x41	; 65
 258:	6d 81       	ldd	r22, Y+5	; 0x05
 25a:	7e 81       	ldd	r23, Y+6	; 0x06
 25c:	8f 81       	ldd	r24, Y+7	; 0x07
 25e:	98 85       	ldd	r25, Y+8	; 0x08
 260:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <__mulsf3>
 264:	dc 01       	movw	r26, r24
 266:	cb 01       	movw	r24, r22
 268:	bc 01       	movw	r22, r24
 26a:	cd 01       	movw	r24, r26
 26c:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <__fixunssfsi>
 270:	dc 01       	movw	r26, r24
 272:	cb 01       	movw	r24, r22
 274:	9c 8f       	std	Y+28, r25	; 0x1c
 276:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
 278:	8b 8d       	ldd	r24, Y+27	; 0x1b
 27a:	9c 8d       	ldd	r25, Y+28	; 0x1c
 27c:	89 2b       	or	r24, r25
 27e:	21 f1       	breq	.+72     	; 0x2c8 <main+0x222>
 280:	80 e9       	ldi	r24, 0x90	; 144
 282:	91 e0       	ldi	r25, 0x01	; 1
 284:	9e 8f       	std	Y+30, r25	; 0x1e
 286:	8d 8f       	std	Y+29, r24	; 0x1d
 288:	8d 8d       	ldd	r24, Y+29	; 0x1d
 28a:	9e 8d       	ldd	r25, Y+30	; 0x1e
 28c:	01 97       	sbiw	r24, 0x01	; 1
 28e:	f1 f7       	brne	.-4      	; 0x28c <main+0x1e6>
 290:	9e 8f       	std	Y+30, r25	; 0x1e
 292:	8d 8f       	std	Y+29, r24	; 0x1d
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 294:	8b 8d       	ldd	r24, Y+27	; 0x1b
 296:	9c 8d       	ldd	r25, Y+28	; 0x1c
 298:	01 97       	sbiw	r24, 0x01	; 1
 29a:	9c 8f       	std	Y+28, r25	; 0x1c
 29c:	8b 8f       	std	Y+27, r24	; 0x1b
 29e:	ec cf       	rjmp	.-40     	; 0x278 <main+0x1d2>
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 2a0:	6f 89       	ldd	r22, Y+23	; 0x17
 2a2:	78 8d       	ldd	r23, Y+24	; 0x18
 2a4:	89 8d       	ldd	r24, Y+25	; 0x19
 2a6:	9a 8d       	ldd	r25, Y+26	; 0x1a
 2a8:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <__fixunssfsi>
 2ac:	dc 01       	movw	r26, r24
 2ae:	cb 01       	movw	r24, r22
 2b0:	9c 8f       	std	Y+28, r25	; 0x1c
 2b2:	8b 8f       	std	Y+27, r24	; 0x1b
 2b4:	8b 8d       	ldd	r24, Y+27	; 0x1b
 2b6:	9c 8d       	ldd	r25, Y+28	; 0x1c
 2b8:	98 a3       	std	Y+32, r25	; 0x20
 2ba:	8f 8f       	std	Y+31, r24	; 0x1f
 2bc:	8f 8d       	ldd	r24, Y+31	; 0x1f
 2be:	98 a1       	ldd	r25, Y+32	; 0x20
 2c0:	01 97       	sbiw	r24, 0x01	; 1
 2c2:	f1 f7       	brne	.-4      	; 0x2c0 <main+0x21a>
 2c4:	98 a3       	std	Y+32, r25	; 0x20
 2c6:	8f 8f       	std	Y+31, r24	; 0x1f
	_delay_ms(delay_time);
	
	PORTB = 2;
 2c8:	85 e2       	ldi	r24, 0x25	; 37
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	22 e0       	ldi	r18, 0x02	; 2
 2ce:	fc 01       	movw	r30, r24
 2d0:	20 83       	st	Z, r18
	PORTD = Bd;
 2d2:	8b e2       	ldi	r24, 0x2B	; 43
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <Bd>
 2da:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <Bd+0x1>
 2de:	fc 01       	movw	r30, r24
 2e0:	20 83       	st	Z, r18
 2e2:	80 e0       	ldi	r24, 0x00	; 0
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	a0 e2       	ldi	r26, 0x20	; 32
 2e8:	b1 e4       	ldi	r27, 0x41	; 65
 2ea:	89 87       	std	Y+9, r24	; 0x09
 2ec:	9a 87       	std	Y+10, r25	; 0x0a
 2ee:	ab 87       	std	Y+11, r26	; 0x0b
 2f0:	bc 87       	std	Y+12, r27	; 0x0c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 2f2:	20 e0       	ldi	r18, 0x00	; 0
 2f4:	30 e0       	ldi	r19, 0x00	; 0
 2f6:	4a e7       	ldi	r20, 0x7A	; 122
 2f8:	55 e4       	ldi	r21, 0x45	; 69
 2fa:	69 85       	ldd	r22, Y+9	; 0x09
 2fc:	7a 85       	ldd	r23, Y+10	; 0x0a
 2fe:	8b 85       	ldd	r24, Y+11	; 0x0b
 300:	9c 85       	ldd	r25, Y+12	; 0x0c
 302:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <__mulsf3>
 306:	dc 01       	movw	r26, r24
 308:	cb 01       	movw	r24, r22
 30a:	8d 87       	std	Y+13, r24	; 0x0d
 30c:	9e 87       	std	Y+14, r25	; 0x0e
 30e:	af 87       	std	Y+15, r26	; 0x0f
 310:	b8 8b       	std	Y+16, r27	; 0x10
	if (__tmp < 1.0)
 312:	20 e0       	ldi	r18, 0x00	; 0
 314:	30 e0       	ldi	r19, 0x00	; 0
 316:	40 e8       	ldi	r20, 0x80	; 128
 318:	5f e3       	ldi	r21, 0x3F	; 63
 31a:	6d 85       	ldd	r22, Y+13	; 0x0d
 31c:	7e 85       	ldd	r23, Y+14	; 0x0e
 31e:	8f 85       	ldd	r24, Y+15	; 0x0f
 320:	98 89       	ldd	r25, Y+16	; 0x10
 322:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <__cmpsf2>
 326:	88 23       	and	r24, r24
 328:	2c f4       	brge	.+10     	; 0x334 <main+0x28e>
		__ticks = 1;
 32a:	81 e0       	ldi	r24, 0x01	; 1
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	9a 8b       	std	Y+18, r25	; 0x12
 330:	89 8b       	std	Y+17, r24	; 0x11
 332:	3f c0       	rjmp	.+126    	; 0x3b2 <main+0x30c>
	else if (__tmp > 65535)
 334:	20 e0       	ldi	r18, 0x00	; 0
 336:	3f ef       	ldi	r19, 0xFF	; 255
 338:	4f e7       	ldi	r20, 0x7F	; 127
 33a:	57 e4       	ldi	r21, 0x47	; 71
 33c:	6d 85       	ldd	r22, Y+13	; 0x0d
 33e:	7e 85       	ldd	r23, Y+14	; 0x0e
 340:	8f 85       	ldd	r24, Y+15	; 0x0f
 342:	98 89       	ldd	r25, Y+16	; 0x10
 344:	0e 94 65 02 	call	0x4ca	; 0x4ca <__gesf2>
 348:	18 16       	cp	r1, r24
 34a:	4c f5       	brge	.+82     	; 0x39e <main+0x2f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 34c:	20 e0       	ldi	r18, 0x00	; 0
 34e:	30 e0       	ldi	r19, 0x00	; 0
 350:	40 e2       	ldi	r20, 0x20	; 32
 352:	51 e4       	ldi	r21, 0x41	; 65
 354:	69 85       	ldd	r22, Y+9	; 0x09
 356:	7a 85       	ldd	r23, Y+10	; 0x0a
 358:	8b 85       	ldd	r24, Y+11	; 0x0b
 35a:	9c 85       	ldd	r25, Y+12	; 0x0c
 35c:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <__mulsf3>
 360:	dc 01       	movw	r26, r24
 362:	cb 01       	movw	r24, r22
 364:	bc 01       	movw	r22, r24
 366:	cd 01       	movw	r24, r26
 368:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <__fixunssfsi>
 36c:	dc 01       	movw	r26, r24
 36e:	cb 01       	movw	r24, r22
 370:	9a 8b       	std	Y+18, r25	; 0x12
 372:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
 374:	89 89       	ldd	r24, Y+17	; 0x11
 376:	9a 89       	ldd	r25, Y+18	; 0x12
 378:	89 2b       	or	r24, r25
 37a:	09 f4       	brne	.+2      	; 0x37e <main+0x2d8>
 37c:	a8 ce       	rjmp	.-688    	; 0xce <main+0x28>
 37e:	80 e9       	ldi	r24, 0x90	; 144
 380:	91 e0       	ldi	r25, 0x01	; 1
 382:	9c 8b       	std	Y+20, r25	; 0x14
 384:	8b 8b       	std	Y+19, r24	; 0x13
 386:	8b 89       	ldd	r24, Y+19	; 0x13
 388:	9c 89       	ldd	r25, Y+20	; 0x14
 38a:	01 97       	sbiw	r24, 0x01	; 1
 38c:	f1 f7       	brne	.-4      	; 0x38a <main+0x2e4>
 38e:	9c 8b       	std	Y+20, r25	; 0x14
 390:	8b 8b       	std	Y+19, r24	; 0x13
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 392:	89 89       	ldd	r24, Y+17	; 0x11
 394:	9a 89       	ldd	r25, Y+18	; 0x12
 396:	01 97       	sbiw	r24, 0x01	; 1
 398:	9a 8b       	std	Y+18, r25	; 0x12
 39a:	89 8b       	std	Y+17, r24	; 0x11
 39c:	eb cf       	rjmp	.-42     	; 0x374 <main+0x2ce>
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 39e:	6d 85       	ldd	r22, Y+13	; 0x0d
 3a0:	7e 85       	ldd	r23, Y+14	; 0x0e
 3a2:	8f 85       	ldd	r24, Y+15	; 0x0f
 3a4:	98 89       	ldd	r25, Y+16	; 0x10
 3a6:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <__fixunssfsi>
 3aa:	dc 01       	movw	r26, r24
 3ac:	cb 01       	movw	r24, r22
 3ae:	9a 8b       	std	Y+18, r25	; 0x12
 3b0:	89 8b       	std	Y+17, r24	; 0x11
 3b2:	89 89       	ldd	r24, Y+17	; 0x11
 3b4:	9a 89       	ldd	r25, Y+18	; 0x12
 3b6:	9e 8b       	std	Y+22, r25	; 0x16
 3b8:	8d 8b       	std	Y+21, r24	; 0x15
 3ba:	8d 89       	ldd	r24, Y+21	; 0x15
 3bc:	9e 89       	ldd	r25, Y+22	; 0x16
 3be:	01 97       	sbiw	r24, 0x01	; 1
 3c0:	f1 f7       	brne	.-4      	; 0x3be <main+0x318>
 3c2:	9e 8b       	std	Y+22, r25	; 0x16
 3c4:	8d 8b       	std	Y+21, r24	; 0x15
int main(void)
{
    DDRB = 0xFF;
	DDRD = 0xFF;
	/* Replace with your application code */
    while (1) 
 3c6:	83 ce       	rjmp	.-762    	; 0xce <main+0x28>

000003c8 <__cmpsf2>:
 3c8:	0e 94 18 02 	call	0x430	; 0x430 <__fp_cmp>
 3cc:	08 f4       	brcc	.+2      	; 0x3d0 <__cmpsf2+0x8>
 3ce:	81 e0       	ldi	r24, 0x01	; 1
 3d0:	08 95       	ret

000003d2 <__fixunssfsi>:
 3d2:	0e 94 44 02 	call	0x488	; 0x488 <__fp_splitA>
 3d6:	88 f0       	brcs	.+34     	; 0x3fa <__fixunssfsi+0x28>
 3d8:	9f 57       	subi	r25, 0x7F	; 127
 3da:	98 f0       	brcs	.+38     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3dc:	b9 2f       	mov	r27, r25
 3de:	99 27       	eor	r25, r25
 3e0:	b7 51       	subi	r27, 0x17	; 23
 3e2:	b0 f0       	brcs	.+44     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 3e4:	e1 f0       	breq	.+56     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 3e6:	66 0f       	add	r22, r22
 3e8:	77 1f       	adc	r23, r23
 3ea:	88 1f       	adc	r24, r24
 3ec:	99 1f       	adc	r25, r25
 3ee:	1a f0       	brmi	.+6      	; 0x3f6 <__fixunssfsi+0x24>
 3f0:	ba 95       	dec	r27
 3f2:	c9 f7       	brne	.-14     	; 0x3e6 <__fixunssfsi+0x14>
 3f4:	14 c0       	rjmp	.+40     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 3f6:	b1 30       	cpi	r27, 0x01	; 1
 3f8:	91 f0       	breq	.+36     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 3fa:	0e 94 5e 02 	call	0x4bc	; 0x4bc <__fp_zero>
 3fe:	b1 e0       	ldi	r27, 0x01	; 1
 400:	08 95       	ret
 402:	0c 94 5e 02 	jmp	0x4bc	; 0x4bc <__fp_zero>
 406:	67 2f       	mov	r22, r23
 408:	78 2f       	mov	r23, r24
 40a:	88 27       	eor	r24, r24
 40c:	b8 5f       	subi	r27, 0xF8	; 248
 40e:	39 f0       	breq	.+14     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 410:	b9 3f       	cpi	r27, 0xF9	; 249
 412:	cc f3       	brlt	.-14     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 414:	86 95       	lsr	r24
 416:	77 95       	ror	r23
 418:	67 95       	ror	r22
 41a:	b3 95       	inc	r27
 41c:	d9 f7       	brne	.-10     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 41e:	3e f4       	brtc	.+14     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 420:	90 95       	com	r25
 422:	80 95       	com	r24
 424:	70 95       	com	r23
 426:	61 95       	neg	r22
 428:	7f 4f       	sbci	r23, 0xFF	; 255
 42a:	8f 4f       	sbci	r24, 0xFF	; 255
 42c:	9f 4f       	sbci	r25, 0xFF	; 255
 42e:	08 95       	ret

00000430 <__fp_cmp>:
 430:	99 0f       	add	r25, r25
 432:	00 08       	sbc	r0, r0
 434:	55 0f       	add	r21, r21
 436:	aa 0b       	sbc	r26, r26
 438:	e0 e8       	ldi	r30, 0x80	; 128
 43a:	fe ef       	ldi	r31, 0xFE	; 254
 43c:	16 16       	cp	r1, r22
 43e:	17 06       	cpc	r1, r23
 440:	e8 07       	cpc	r30, r24
 442:	f9 07       	cpc	r31, r25
 444:	c0 f0       	brcs	.+48     	; 0x476 <__fp_cmp+0x46>
 446:	12 16       	cp	r1, r18
 448:	13 06       	cpc	r1, r19
 44a:	e4 07       	cpc	r30, r20
 44c:	f5 07       	cpc	r31, r21
 44e:	98 f0       	brcs	.+38     	; 0x476 <__fp_cmp+0x46>
 450:	62 1b       	sub	r22, r18
 452:	73 0b       	sbc	r23, r19
 454:	84 0b       	sbc	r24, r20
 456:	95 0b       	sbc	r25, r21
 458:	39 f4       	brne	.+14     	; 0x468 <__fp_cmp+0x38>
 45a:	0a 26       	eor	r0, r26
 45c:	61 f0       	breq	.+24     	; 0x476 <__fp_cmp+0x46>
 45e:	23 2b       	or	r18, r19
 460:	24 2b       	or	r18, r20
 462:	25 2b       	or	r18, r21
 464:	21 f4       	brne	.+8      	; 0x46e <__fp_cmp+0x3e>
 466:	08 95       	ret
 468:	0a 26       	eor	r0, r26
 46a:	09 f4       	brne	.+2      	; 0x46e <__fp_cmp+0x3e>
 46c:	a1 40       	sbci	r26, 0x01	; 1
 46e:	a6 95       	lsr	r26
 470:	8f ef       	ldi	r24, 0xFF	; 255
 472:	81 1d       	adc	r24, r1
 474:	81 1d       	adc	r24, r1
 476:	08 95       	ret

00000478 <__fp_split3>:
 478:	57 fd       	sbrc	r21, 7
 47a:	90 58       	subi	r25, 0x80	; 128
 47c:	44 0f       	add	r20, r20
 47e:	55 1f       	adc	r21, r21
 480:	59 f0       	breq	.+22     	; 0x498 <__fp_splitA+0x10>
 482:	5f 3f       	cpi	r21, 0xFF	; 255
 484:	71 f0       	breq	.+28     	; 0x4a2 <__fp_splitA+0x1a>
 486:	47 95       	ror	r20

00000488 <__fp_splitA>:
 488:	88 0f       	add	r24, r24
 48a:	97 fb       	bst	r25, 7
 48c:	99 1f       	adc	r25, r25
 48e:	61 f0       	breq	.+24     	; 0x4a8 <__fp_splitA+0x20>
 490:	9f 3f       	cpi	r25, 0xFF	; 255
 492:	79 f0       	breq	.+30     	; 0x4b2 <__fp_splitA+0x2a>
 494:	87 95       	ror	r24
 496:	08 95       	ret
 498:	12 16       	cp	r1, r18
 49a:	13 06       	cpc	r1, r19
 49c:	14 06       	cpc	r1, r20
 49e:	55 1f       	adc	r21, r21
 4a0:	f2 cf       	rjmp	.-28     	; 0x486 <__fp_split3+0xe>
 4a2:	46 95       	lsr	r20
 4a4:	f1 df       	rcall	.-30     	; 0x488 <__fp_splitA>
 4a6:	08 c0       	rjmp	.+16     	; 0x4b8 <__fp_splitA+0x30>
 4a8:	16 16       	cp	r1, r22
 4aa:	17 06       	cpc	r1, r23
 4ac:	18 06       	cpc	r1, r24
 4ae:	99 1f       	adc	r25, r25
 4b0:	f1 cf       	rjmp	.-30     	; 0x494 <__fp_splitA+0xc>
 4b2:	86 95       	lsr	r24
 4b4:	71 05       	cpc	r23, r1
 4b6:	61 05       	cpc	r22, r1
 4b8:	08 94       	sec
 4ba:	08 95       	ret

000004bc <__fp_zero>:
 4bc:	e8 94       	clt

000004be <__fp_szero>:
 4be:	bb 27       	eor	r27, r27
 4c0:	66 27       	eor	r22, r22
 4c2:	77 27       	eor	r23, r23
 4c4:	cb 01       	movw	r24, r22
 4c6:	97 f9       	bld	r25, 7
 4c8:	08 95       	ret

000004ca <__gesf2>:
 4ca:	0e 94 18 02 	call	0x430	; 0x430 <__fp_cmp>
 4ce:	08 f4       	brcc	.+2      	; 0x4d2 <__gesf2+0x8>
 4d0:	8f ef       	ldi	r24, 0xFF	; 255
 4d2:	08 95       	ret

000004d4 <__mulsf3>:
 4d4:	0e 94 7d 02 	call	0x4fa	; 0x4fa <__mulsf3x>
 4d8:	0c 94 ee 02 	jmp	0x5dc	; 0x5dc <__fp_round>
 4dc:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <__fp_pscA>
 4e0:	38 f0       	brcs	.+14     	; 0x4f0 <__mulsf3+0x1c>
 4e2:	0e 94 e7 02 	call	0x5ce	; 0x5ce <__fp_pscB>
 4e6:	20 f0       	brcs	.+8      	; 0x4f0 <__mulsf3+0x1c>
 4e8:	95 23       	and	r25, r21
 4ea:	11 f0       	breq	.+4      	; 0x4f0 <__mulsf3+0x1c>
 4ec:	0c 94 d7 02 	jmp	0x5ae	; 0x5ae <__fp_inf>
 4f0:	0c 94 dd 02 	jmp	0x5ba	; 0x5ba <__fp_nan>
 4f4:	11 24       	eor	r1, r1
 4f6:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__fp_szero>

000004fa <__mulsf3x>:
 4fa:	0e 94 3c 02 	call	0x478	; 0x478 <__fp_split3>
 4fe:	70 f3       	brcs	.-36     	; 0x4dc <__mulsf3+0x8>

00000500 <__mulsf3_pse>:
 500:	95 9f       	mul	r25, r21
 502:	c1 f3       	breq	.-16     	; 0x4f4 <__mulsf3+0x20>
 504:	95 0f       	add	r25, r21
 506:	50 e0       	ldi	r21, 0x00	; 0
 508:	55 1f       	adc	r21, r21
 50a:	62 9f       	mul	r22, r18
 50c:	f0 01       	movw	r30, r0
 50e:	72 9f       	mul	r23, r18
 510:	bb 27       	eor	r27, r27
 512:	f0 0d       	add	r31, r0
 514:	b1 1d       	adc	r27, r1
 516:	63 9f       	mul	r22, r19
 518:	aa 27       	eor	r26, r26
 51a:	f0 0d       	add	r31, r0
 51c:	b1 1d       	adc	r27, r1
 51e:	aa 1f       	adc	r26, r26
 520:	64 9f       	mul	r22, r20
 522:	66 27       	eor	r22, r22
 524:	b0 0d       	add	r27, r0
 526:	a1 1d       	adc	r26, r1
 528:	66 1f       	adc	r22, r22
 52a:	82 9f       	mul	r24, r18
 52c:	22 27       	eor	r18, r18
 52e:	b0 0d       	add	r27, r0
 530:	a1 1d       	adc	r26, r1
 532:	62 1f       	adc	r22, r18
 534:	73 9f       	mul	r23, r19
 536:	b0 0d       	add	r27, r0
 538:	a1 1d       	adc	r26, r1
 53a:	62 1f       	adc	r22, r18
 53c:	83 9f       	mul	r24, r19
 53e:	a0 0d       	add	r26, r0
 540:	61 1d       	adc	r22, r1
 542:	22 1f       	adc	r18, r18
 544:	74 9f       	mul	r23, r20
 546:	33 27       	eor	r19, r19
 548:	a0 0d       	add	r26, r0
 54a:	61 1d       	adc	r22, r1
 54c:	23 1f       	adc	r18, r19
 54e:	84 9f       	mul	r24, r20
 550:	60 0d       	add	r22, r0
 552:	21 1d       	adc	r18, r1
 554:	82 2f       	mov	r24, r18
 556:	76 2f       	mov	r23, r22
 558:	6a 2f       	mov	r22, r26
 55a:	11 24       	eor	r1, r1
 55c:	9f 57       	subi	r25, 0x7F	; 127
 55e:	50 40       	sbci	r21, 0x00	; 0
 560:	9a f0       	brmi	.+38     	; 0x588 <__mulsf3_pse+0x88>
 562:	f1 f0       	breq	.+60     	; 0x5a0 <__mulsf3_pse+0xa0>
 564:	88 23       	and	r24, r24
 566:	4a f0       	brmi	.+18     	; 0x57a <__mulsf3_pse+0x7a>
 568:	ee 0f       	add	r30, r30
 56a:	ff 1f       	adc	r31, r31
 56c:	bb 1f       	adc	r27, r27
 56e:	66 1f       	adc	r22, r22
 570:	77 1f       	adc	r23, r23
 572:	88 1f       	adc	r24, r24
 574:	91 50       	subi	r25, 0x01	; 1
 576:	50 40       	sbci	r21, 0x00	; 0
 578:	a9 f7       	brne	.-22     	; 0x564 <__mulsf3_pse+0x64>
 57a:	9e 3f       	cpi	r25, 0xFE	; 254
 57c:	51 05       	cpc	r21, r1
 57e:	80 f0       	brcs	.+32     	; 0x5a0 <__mulsf3_pse+0xa0>
 580:	0c 94 d7 02 	jmp	0x5ae	; 0x5ae <__fp_inf>
 584:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__fp_szero>
 588:	5f 3f       	cpi	r21, 0xFF	; 255
 58a:	e4 f3       	brlt	.-8      	; 0x584 <__mulsf3_pse+0x84>
 58c:	98 3e       	cpi	r25, 0xE8	; 232
 58e:	d4 f3       	brlt	.-12     	; 0x584 <__mulsf3_pse+0x84>
 590:	86 95       	lsr	r24
 592:	77 95       	ror	r23
 594:	67 95       	ror	r22
 596:	b7 95       	ror	r27
 598:	f7 95       	ror	r31
 59a:	e7 95       	ror	r30
 59c:	9f 5f       	subi	r25, 0xFF	; 255
 59e:	c1 f7       	brne	.-16     	; 0x590 <__mulsf3_pse+0x90>
 5a0:	fe 2b       	or	r31, r30
 5a2:	88 0f       	add	r24, r24
 5a4:	91 1d       	adc	r25, r1
 5a6:	96 95       	lsr	r25
 5a8:	87 95       	ror	r24
 5aa:	97 f9       	bld	r25, 7
 5ac:	08 95       	ret

000005ae <__fp_inf>:
 5ae:	97 f9       	bld	r25, 7
 5b0:	9f 67       	ori	r25, 0x7F	; 127
 5b2:	80 e8       	ldi	r24, 0x80	; 128
 5b4:	70 e0       	ldi	r23, 0x00	; 0
 5b6:	60 e0       	ldi	r22, 0x00	; 0
 5b8:	08 95       	ret

000005ba <__fp_nan>:
 5ba:	9f ef       	ldi	r25, 0xFF	; 255
 5bc:	80 ec       	ldi	r24, 0xC0	; 192
 5be:	08 95       	ret

000005c0 <__fp_pscA>:
 5c0:	00 24       	eor	r0, r0
 5c2:	0a 94       	dec	r0
 5c4:	16 16       	cp	r1, r22
 5c6:	17 06       	cpc	r1, r23
 5c8:	18 06       	cpc	r1, r24
 5ca:	09 06       	cpc	r0, r25
 5cc:	08 95       	ret

000005ce <__fp_pscB>:
 5ce:	00 24       	eor	r0, r0
 5d0:	0a 94       	dec	r0
 5d2:	12 16       	cp	r1, r18
 5d4:	13 06       	cpc	r1, r19
 5d6:	14 06       	cpc	r1, r20
 5d8:	05 06       	cpc	r0, r21
 5da:	08 95       	ret

000005dc <__fp_round>:
 5dc:	09 2e       	mov	r0, r25
 5de:	03 94       	inc	r0
 5e0:	00 0c       	add	r0, r0
 5e2:	11 f4       	brne	.+4      	; 0x5e8 <__fp_round+0xc>
 5e4:	88 23       	and	r24, r24
 5e6:	52 f0       	brmi	.+20     	; 0x5fc <__fp_round+0x20>
 5e8:	bb 0f       	add	r27, r27
 5ea:	40 f4       	brcc	.+16     	; 0x5fc <__fp_round+0x20>
 5ec:	bf 2b       	or	r27, r31
 5ee:	11 f4       	brne	.+4      	; 0x5f4 <__fp_round+0x18>
 5f0:	60 ff       	sbrs	r22, 0
 5f2:	04 c0       	rjmp	.+8      	; 0x5fc <__fp_round+0x20>
 5f4:	6f 5f       	subi	r22, 0xFF	; 255
 5f6:	7f 4f       	sbci	r23, 0xFF	; 255
 5f8:	8f 4f       	sbci	r24, 0xFF	; 255
 5fa:	9f 4f       	sbci	r25, 0xFF	; 255
 5fc:	08 95       	ret

000005fe <_exit>:
 5fe:	f8 94       	cli

00000600 <__stop_program>:
 600:	ff cf       	rjmp	.-2      	; 0x600 <__stop_program>
