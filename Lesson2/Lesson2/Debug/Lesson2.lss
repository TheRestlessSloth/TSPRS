
Lesson2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000580  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000052c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000580  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005b0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000005f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007c4  00000000  00000000  00000610  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000671  00000000  00000000  00000dd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000331  00000000  00000000  00001445  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001778  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000039e  00000000  00000000  000017ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000047  00000000  00000000  00001b4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001b91  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 94 02 	jmp	0x528	; 0x528 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#define F_CPU 16000000UL
#include <util/delay.h>


int main(void)
{
  80:	cf 93       	push	r28
  82:	df 93       	push	r29
  84:	cd b7       	in	r28, 0x3d	; 61
  86:	de b7       	in	r29, 0x3e	; 62
  88:	a0 97       	sbiw	r28, 0x20	; 32
  8a:	0f b6       	in	r0, 0x3f	; 63
  8c:	f8 94       	cli
  8e:	de bf       	out	0x3e, r29	; 62
  90:	0f be       	out	0x3f, r0	; 63
  92:	cd bf       	out	0x3d, r28	; 61
	DDRD = 0xFF;
  94:	8a e2       	ldi	r24, 0x2A	; 42
  96:	90 e0       	ldi	r25, 0x00	; 0
  98:	2f ef       	ldi	r18, 0xFF	; 255
  9a:	fc 01       	movw	r30, r24
  9c:	20 83       	st	Z, r18
	PORTD = 0xFF;
  9e:	8b e2       	ldi	r24, 0x2B	; 43
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	2f ef       	ldi	r18, 0xFF	; 255
  a4:	fc 01       	movw	r30, r24
  a6:	20 83       	st	Z, r18
	
	ASSR = 0x00;
  a8:	86 eb       	ldi	r24, 0xB6	; 182
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	fc 01       	movw	r30, r24
  ae:	10 82       	st	Z, r1
 	TCCR0A = 0b00000011; //fast-pwm
  b0:	84 e4       	ldi	r24, 0x44	; 68
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	23 e0       	ldi	r18, 0x03	; 3
  b6:	fc 01       	movw	r30, r24
  b8:	20 83       	st	Z, r18
	TCCR0A |= 0b10000000; //??????? ??? ?????????
  ba:	84 e4       	ldi	r24, 0x44	; 68
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	24 e4       	ldi	r18, 0x44	; 68
  c0:	30 e0       	ldi	r19, 0x00	; 0
  c2:	f9 01       	movw	r30, r18
  c4:	20 81       	ld	r18, Z
  c6:	20 68       	ori	r18, 0x80	; 128
  c8:	fc 01       	movw	r30, r24
  ca:	20 83       	st	Z, r18
	TCCR0A |= 0b00100000;
  cc:	84 e4       	ldi	r24, 0x44	; 68
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	24 e4       	ldi	r18, 0x44	; 68
  d2:	30 e0       	ldi	r19, 0x00	; 0
  d4:	f9 01       	movw	r30, r18
  d6:	20 81       	ld	r18, Z
  d8:	20 62       	ori	r18, 0x20	; 32
  da:	fc 01       	movw	r30, r24
  dc:	20 83       	st	Z, r18
	
	/* Replace with your application code */
	while (1)
	{
		for(int i = 0; i<250; i = i+5)
  de:	1a 82       	std	Y+2, r1	; 0x02
  e0:	19 82       	std	Y+1, r1	; 0x01
  e2:	89 81       	ldd	r24, Y+1	; 0x01
  e4:	9a 81       	ldd	r25, Y+2	; 0x02
  e6:	8a 3f       	cpi	r24, 0xFA	; 250
  e8:	91 05       	cpc	r25, r1
  ea:	0c f0       	brlt	.+2      	; 0xee <main+0x6e>
  ec:	7c c0       	rjmp	.+248    	; 0x1e6 <main+0x166>
		{
			OCR0A = i;
  ee:	87 e4       	ldi	r24, 0x47	; 71
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	29 81       	ldd	r18, Y+1	; 0x01
  f4:	fc 01       	movw	r30, r24
  f6:	20 83       	st	Z, r18
  f8:	80 e0       	ldi	r24, 0x00	; 0
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	a8 e4       	ldi	r26, 0x48	; 72
  fe:	b2 e4       	ldi	r27, 0x42	; 66
 100:	89 87       	std	Y+9, r24	; 0x09
 102:	9a 87       	std	Y+10, r25	; 0x0a
 104:	ab 87       	std	Y+11, r26	; 0x0b
 106:	bc 87       	std	Y+12, r27	; 0x0c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 108:	20 e0       	ldi	r18, 0x00	; 0
 10a:	30 e0       	ldi	r19, 0x00	; 0
 10c:	4a e7       	ldi	r20, 0x7A	; 122
 10e:	55 e4       	ldi	r21, 0x45	; 69
 110:	69 85       	ldd	r22, Y+9	; 0x09
 112:	7a 85       	ldd	r23, Y+10	; 0x0a
 114:	8b 85       	ldd	r24, Y+11	; 0x0b
 116:	9c 85       	ldd	r25, Y+12	; 0x0c
 118:	0e 94 ff 01 	call	0x3fe	; 0x3fe <__mulsf3>
 11c:	dc 01       	movw	r26, r24
 11e:	cb 01       	movw	r24, r22
 120:	8d 87       	std	Y+13, r24	; 0x0d
 122:	9e 87       	std	Y+14, r25	; 0x0e
 124:	af 87       	std	Y+15, r26	; 0x0f
 126:	b8 8b       	std	Y+16, r27	; 0x10
	if (__tmp < 1.0)
 128:	20 e0       	ldi	r18, 0x00	; 0
 12a:	30 e0       	ldi	r19, 0x00	; 0
 12c:	40 e8       	ldi	r20, 0x80	; 128
 12e:	5f e3       	ldi	r21, 0x3F	; 63
 130:	6d 85       	ldd	r22, Y+13	; 0x0d
 132:	7e 85       	ldd	r23, Y+14	; 0x0e
 134:	8f 85       	ldd	r24, Y+15	; 0x0f
 136:	98 89       	ldd	r25, Y+16	; 0x10
 138:	0e 94 79 01 	call	0x2f2	; 0x2f2 <__cmpsf2>
 13c:	88 23       	and	r24, r24
 13e:	2c f4       	brge	.+10     	; 0x14a <main+0xca>
		__ticks = 1;
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	9a 8b       	std	Y+18, r25	; 0x12
 146:	89 8b       	std	Y+17, r24	; 0x11
 148:	3e c0       	rjmp	.+124    	; 0x1c6 <main+0x146>
	else if (__tmp > 65535)
 14a:	20 e0       	ldi	r18, 0x00	; 0
 14c:	3f ef       	ldi	r19, 0xFF	; 255
 14e:	4f e7       	ldi	r20, 0x7F	; 127
 150:	57 e4       	ldi	r21, 0x47	; 71
 152:	6d 85       	ldd	r22, Y+13	; 0x0d
 154:	7e 85       	ldd	r23, Y+14	; 0x0e
 156:	8f 85       	ldd	r24, Y+15	; 0x0f
 158:	98 89       	ldd	r25, Y+16	; 0x10
 15a:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <__gesf2>
 15e:	18 16       	cp	r1, r24
 160:	44 f5       	brge	.+80     	; 0x1b2 <main+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 162:	20 e0       	ldi	r18, 0x00	; 0
 164:	30 e0       	ldi	r19, 0x00	; 0
 166:	40 e2       	ldi	r20, 0x20	; 32
 168:	51 e4       	ldi	r21, 0x41	; 65
 16a:	69 85       	ldd	r22, Y+9	; 0x09
 16c:	7a 85       	ldd	r23, Y+10	; 0x0a
 16e:	8b 85       	ldd	r24, Y+11	; 0x0b
 170:	9c 85       	ldd	r25, Y+12	; 0x0c
 172:	0e 94 ff 01 	call	0x3fe	; 0x3fe <__mulsf3>
 176:	dc 01       	movw	r26, r24
 178:	cb 01       	movw	r24, r22
 17a:	bc 01       	movw	r22, r24
 17c:	cd 01       	movw	r24, r26
 17e:	0e 94 7e 01 	call	0x2fc	; 0x2fc <__fixunssfsi>
 182:	dc 01       	movw	r26, r24
 184:	cb 01       	movw	r24, r22
 186:	9a 8b       	std	Y+18, r25	; 0x12
 188:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
 18a:	89 89       	ldd	r24, Y+17	; 0x11
 18c:	9a 89       	ldd	r25, Y+18	; 0x12
 18e:	89 2b       	or	r24, r25
 190:	21 f1       	breq	.+72     	; 0x1da <main+0x15a>
 192:	80 e9       	ldi	r24, 0x90	; 144
 194:	91 e0       	ldi	r25, 0x01	; 1
 196:	9c 8b       	std	Y+20, r25	; 0x14
 198:	8b 8b       	std	Y+19, r24	; 0x13
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
 19a:	8b 89       	ldd	r24, Y+19	; 0x13
 19c:	9c 89       	ldd	r25, Y+20	; 0x14
 19e:	01 97       	sbiw	r24, 0x01	; 1
 1a0:	f1 f7       	brne	.-4      	; 0x19e <main+0x11e>
 1a2:	9c 8b       	std	Y+20, r25	; 0x14
 1a4:	8b 8b       	std	Y+19, r24	; 0x13
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1a6:	89 89       	ldd	r24, Y+17	; 0x11
 1a8:	9a 89       	ldd	r25, Y+18	; 0x12
 1aa:	01 97       	sbiw	r24, 0x01	; 1
 1ac:	9a 8b       	std	Y+18, r25	; 0x12
 1ae:	89 8b       	std	Y+17, r24	; 0x11
 1b0:	ec cf       	rjmp	.-40     	; 0x18a <main+0x10a>
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 1b2:	6d 85       	ldd	r22, Y+13	; 0x0d
 1b4:	7e 85       	ldd	r23, Y+14	; 0x0e
 1b6:	8f 85       	ldd	r24, Y+15	; 0x0f
 1b8:	98 89       	ldd	r25, Y+16	; 0x10
 1ba:	0e 94 7e 01 	call	0x2fc	; 0x2fc <__fixunssfsi>
 1be:	dc 01       	movw	r26, r24
 1c0:	cb 01       	movw	r24, r22
 1c2:	9a 8b       	std	Y+18, r25	; 0x12
 1c4:	89 8b       	std	Y+17, r24	; 0x11
 1c6:	89 89       	ldd	r24, Y+17	; 0x11
 1c8:	9a 89       	ldd	r25, Y+18	; 0x12
 1ca:	9e 8b       	std	Y+22, r25	; 0x16
 1cc:	8d 8b       	std	Y+21, r24	; 0x15
 1ce:	8d 89       	ldd	r24, Y+21	; 0x15
 1d0:	9e 89       	ldd	r25, Y+22	; 0x16
 1d2:	01 97       	sbiw	r24, 0x01	; 1
 1d4:	f1 f7       	brne	.-4      	; 0x1d2 <main+0x152>
 1d6:	9e 8b       	std	Y+22, r25	; 0x16
 1d8:	8d 8b       	std	Y+21, r24	; 0x15
	TCCR0A |= 0b00100000;
	
	/* Replace with your application code */
	while (1)
	{
		for(int i = 0; i<250; i = i+5)
 1da:	89 81       	ldd	r24, Y+1	; 0x01
 1dc:	9a 81       	ldd	r25, Y+2	; 0x02
 1de:	05 96       	adiw	r24, 0x05	; 5
 1e0:	9a 83       	std	Y+2, r25	; 0x02
 1e2:	89 83       	std	Y+1, r24	; 0x01
 1e4:	7e cf       	rjmp	.-260    	; 0xe2 <main+0x62>
		{
			OCR0A = i;
			_delay_ms(50);
		}
		
		for(int i = 250; i>0; i = i-5)
 1e6:	8a ef       	ldi	r24, 0xFA	; 250
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	9c 83       	std	Y+4, r25	; 0x04
 1ec:	8b 83       	std	Y+3, r24	; 0x03
 1ee:	8b 81       	ldd	r24, Y+3	; 0x03
 1f0:	9c 81       	ldd	r25, Y+4	; 0x04
 1f2:	18 16       	cp	r1, r24
 1f4:	19 06       	cpc	r1, r25
 1f6:	0c f0       	brlt	.+2      	; 0x1fa <main+0x17a>
 1f8:	72 cf       	rjmp	.-284    	; 0xde <main+0x5e>
		{
			OCR0A = i;
 1fa:	87 e4       	ldi	r24, 0x47	; 71
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	2b 81       	ldd	r18, Y+3	; 0x03
 200:	fc 01       	movw	r30, r24
 202:	20 83       	st	Z, r18
 204:	80 e0       	ldi	r24, 0x00	; 0
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	a8 e4       	ldi	r26, 0x48	; 72
 20a:	b2 e4       	ldi	r27, 0x42	; 66
 20c:	8d 83       	std	Y+5, r24	; 0x05
 20e:	9e 83       	std	Y+6, r25	; 0x06
 210:	af 83       	std	Y+7, r26	; 0x07
 212:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 214:	20 e0       	ldi	r18, 0x00	; 0
 216:	30 e0       	ldi	r19, 0x00	; 0
 218:	4a e7       	ldi	r20, 0x7A	; 122
 21a:	55 e4       	ldi	r21, 0x45	; 69
 21c:	6d 81       	ldd	r22, Y+5	; 0x05
 21e:	7e 81       	ldd	r23, Y+6	; 0x06
 220:	8f 81       	ldd	r24, Y+7	; 0x07
 222:	98 85       	ldd	r25, Y+8	; 0x08
 224:	0e 94 ff 01 	call	0x3fe	; 0x3fe <__mulsf3>
 228:	dc 01       	movw	r26, r24
 22a:	cb 01       	movw	r24, r22
 22c:	8f 8b       	std	Y+23, r24	; 0x17
 22e:	98 8f       	std	Y+24, r25	; 0x18
 230:	a9 8f       	std	Y+25, r26	; 0x19
 232:	ba 8f       	std	Y+26, r27	; 0x1a
	if (__tmp < 1.0)
 234:	20 e0       	ldi	r18, 0x00	; 0
 236:	30 e0       	ldi	r19, 0x00	; 0
 238:	40 e8       	ldi	r20, 0x80	; 128
 23a:	5f e3       	ldi	r21, 0x3F	; 63
 23c:	6f 89       	ldd	r22, Y+23	; 0x17
 23e:	78 8d       	ldd	r23, Y+24	; 0x18
 240:	89 8d       	ldd	r24, Y+25	; 0x19
 242:	9a 8d       	ldd	r25, Y+26	; 0x1a
 244:	0e 94 79 01 	call	0x2f2	; 0x2f2 <__cmpsf2>
 248:	88 23       	and	r24, r24
 24a:	2c f4       	brge	.+10     	; 0x256 <main+0x1d6>
		__ticks = 1;
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	9c 8f       	std	Y+28, r25	; 0x1c
 252:	8b 8f       	std	Y+27, r24	; 0x1b
 254:	3e c0       	rjmp	.+124    	; 0x2d2 <main+0x252>
	else if (__tmp > 65535)
 256:	20 e0       	ldi	r18, 0x00	; 0
 258:	3f ef       	ldi	r19, 0xFF	; 255
 25a:	4f e7       	ldi	r20, 0x7F	; 127
 25c:	57 e4       	ldi	r21, 0x47	; 71
 25e:	6f 89       	ldd	r22, Y+23	; 0x17
 260:	78 8d       	ldd	r23, Y+24	; 0x18
 262:	89 8d       	ldd	r24, Y+25	; 0x19
 264:	9a 8d       	ldd	r25, Y+26	; 0x1a
 266:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <__gesf2>
 26a:	18 16       	cp	r1, r24
 26c:	44 f5       	brge	.+80     	; 0x2be <main+0x23e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 26e:	20 e0       	ldi	r18, 0x00	; 0
 270:	30 e0       	ldi	r19, 0x00	; 0
 272:	40 e2       	ldi	r20, 0x20	; 32
 274:	51 e4       	ldi	r21, 0x41	; 65
 276:	6d 81       	ldd	r22, Y+5	; 0x05
 278:	7e 81       	ldd	r23, Y+6	; 0x06
 27a:	8f 81       	ldd	r24, Y+7	; 0x07
 27c:	98 85       	ldd	r25, Y+8	; 0x08
 27e:	0e 94 ff 01 	call	0x3fe	; 0x3fe <__mulsf3>
 282:	dc 01       	movw	r26, r24
 284:	cb 01       	movw	r24, r22
 286:	bc 01       	movw	r22, r24
 288:	cd 01       	movw	r24, r26
 28a:	0e 94 7e 01 	call	0x2fc	; 0x2fc <__fixunssfsi>
 28e:	dc 01       	movw	r26, r24
 290:	cb 01       	movw	r24, r22
 292:	9c 8f       	std	Y+28, r25	; 0x1c
 294:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
 296:	8b 8d       	ldd	r24, Y+27	; 0x1b
 298:	9c 8d       	ldd	r25, Y+28	; 0x1c
 29a:	89 2b       	or	r24, r25
 29c:	21 f1       	breq	.+72     	; 0x2e6 <main+0x266>
 29e:	80 e9       	ldi	r24, 0x90	; 144
 2a0:	91 e0       	ldi	r25, 0x01	; 1
 2a2:	9e 8f       	std	Y+30, r25	; 0x1e
 2a4:	8d 8f       	std	Y+29, r24	; 0x1d
 2a6:	8d 8d       	ldd	r24, Y+29	; 0x1d
 2a8:	9e 8d       	ldd	r25, Y+30	; 0x1e
 2aa:	01 97       	sbiw	r24, 0x01	; 1
 2ac:	f1 f7       	brne	.-4      	; 0x2aa <main+0x22a>
 2ae:	9e 8f       	std	Y+30, r25	; 0x1e
 2b0:	8d 8f       	std	Y+29, r24	; 0x1d
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2b2:	8b 8d       	ldd	r24, Y+27	; 0x1b
 2b4:	9c 8d       	ldd	r25, Y+28	; 0x1c
 2b6:	01 97       	sbiw	r24, 0x01	; 1
 2b8:	9c 8f       	std	Y+28, r25	; 0x1c
 2ba:	8b 8f       	std	Y+27, r24	; 0x1b
 2bc:	ec cf       	rjmp	.-40     	; 0x296 <main+0x216>
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 2be:	6f 89       	ldd	r22, Y+23	; 0x17
 2c0:	78 8d       	ldd	r23, Y+24	; 0x18
 2c2:	89 8d       	ldd	r24, Y+25	; 0x19
 2c4:	9a 8d       	ldd	r25, Y+26	; 0x1a
 2c6:	0e 94 7e 01 	call	0x2fc	; 0x2fc <__fixunssfsi>
 2ca:	dc 01       	movw	r26, r24
 2cc:	cb 01       	movw	r24, r22
 2ce:	9c 8f       	std	Y+28, r25	; 0x1c
 2d0:	8b 8f       	std	Y+27, r24	; 0x1b
 2d2:	8b 8d       	ldd	r24, Y+27	; 0x1b
 2d4:	9c 8d       	ldd	r25, Y+28	; 0x1c
 2d6:	98 a3       	std	Y+32, r25	; 0x20
 2d8:	8f 8f       	std	Y+31, r24	; 0x1f
 2da:	8f 8d       	ldd	r24, Y+31	; 0x1f
 2dc:	98 a1       	ldd	r25, Y+32	; 0x20
 2de:	01 97       	sbiw	r24, 0x01	; 1
 2e0:	f1 f7       	brne	.-4      	; 0x2de <main+0x25e>
 2e2:	98 a3       	std	Y+32, r25	; 0x20
 2e4:	8f 8f       	std	Y+31, r24	; 0x1f
		{
			OCR0A = i;
			_delay_ms(50);
		}
		
		for(int i = 250; i>0; i = i-5)
 2e6:	8b 81       	ldd	r24, Y+3	; 0x03
 2e8:	9c 81       	ldd	r25, Y+4	; 0x04
 2ea:	05 97       	sbiw	r24, 0x05	; 5
 2ec:	9c 83       	std	Y+4, r25	; 0x04
 2ee:	8b 83       	std	Y+3, r24	; 0x03
 2f0:	7e cf       	rjmp	.-260    	; 0x1ee <main+0x16e>

000002f2 <__cmpsf2>:
 2f2:	0e 94 ad 01 	call	0x35a	; 0x35a <__fp_cmp>
 2f6:	08 f4       	brcc	.+2      	; 0x2fa <__cmpsf2+0x8>
 2f8:	81 e0       	ldi	r24, 0x01	; 1
 2fa:	08 95       	ret

000002fc <__fixunssfsi>:
 2fc:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <__fp_splitA>
 300:	88 f0       	brcs	.+34     	; 0x324 <__fixunssfsi+0x28>
 302:	9f 57       	subi	r25, 0x7F	; 127
 304:	98 f0       	brcs	.+38     	; 0x32c <__fixunssfsi+0x30>
 306:	b9 2f       	mov	r27, r25
 308:	99 27       	eor	r25, r25
 30a:	b7 51       	subi	r27, 0x17	; 23
 30c:	b0 f0       	brcs	.+44     	; 0x33a <__fixunssfsi+0x3e>
 30e:	e1 f0       	breq	.+56     	; 0x348 <__fixunssfsi+0x4c>
 310:	66 0f       	add	r22, r22
 312:	77 1f       	adc	r23, r23
 314:	88 1f       	adc	r24, r24
 316:	99 1f       	adc	r25, r25
 318:	1a f0       	brmi	.+6      	; 0x320 <__fixunssfsi+0x24>
 31a:	ba 95       	dec	r27
 31c:	c9 f7       	brne	.-14     	; 0x310 <__fixunssfsi+0x14>
 31e:	14 c0       	rjmp	.+40     	; 0x348 <__fixunssfsi+0x4c>
 320:	b1 30       	cpi	r27, 0x01	; 1
 322:	91 f0       	breq	.+36     	; 0x348 <__fixunssfsi+0x4c>
 324:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <__fp_zero>
 328:	b1 e0       	ldi	r27, 0x01	; 1
 32a:	08 95       	ret
 32c:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <__fp_zero>
 330:	67 2f       	mov	r22, r23
 332:	78 2f       	mov	r23, r24
 334:	88 27       	eor	r24, r24
 336:	b8 5f       	subi	r27, 0xF8	; 248
 338:	39 f0       	breq	.+14     	; 0x348 <__fixunssfsi+0x4c>
 33a:	b9 3f       	cpi	r27, 0xF9	; 249
 33c:	cc f3       	brlt	.-14     	; 0x330 <__fixunssfsi+0x34>
 33e:	86 95       	lsr	r24
 340:	77 95       	ror	r23
 342:	67 95       	ror	r22
 344:	b3 95       	inc	r27
 346:	d9 f7       	brne	.-10     	; 0x33e <__fixunssfsi+0x42>
 348:	3e f4       	brtc	.+14     	; 0x358 <__fixunssfsi+0x5c>
 34a:	90 95       	com	r25
 34c:	80 95       	com	r24
 34e:	70 95       	com	r23
 350:	61 95       	neg	r22
 352:	7f 4f       	sbci	r23, 0xFF	; 255
 354:	8f 4f       	sbci	r24, 0xFF	; 255
 356:	9f 4f       	sbci	r25, 0xFF	; 255
 358:	08 95       	ret

0000035a <__fp_cmp>:
 35a:	99 0f       	add	r25, r25
 35c:	00 08       	sbc	r0, r0
 35e:	55 0f       	add	r21, r21
 360:	aa 0b       	sbc	r26, r26
 362:	e0 e8       	ldi	r30, 0x80	; 128
 364:	fe ef       	ldi	r31, 0xFE	; 254
 366:	16 16       	cp	r1, r22
 368:	17 06       	cpc	r1, r23
 36a:	e8 07       	cpc	r30, r24
 36c:	f9 07       	cpc	r31, r25
 36e:	c0 f0       	brcs	.+48     	; 0x3a0 <__fp_cmp+0x46>
 370:	12 16       	cp	r1, r18
 372:	13 06       	cpc	r1, r19
 374:	e4 07       	cpc	r30, r20
 376:	f5 07       	cpc	r31, r21
 378:	98 f0       	brcs	.+38     	; 0x3a0 <__fp_cmp+0x46>
 37a:	62 1b       	sub	r22, r18
 37c:	73 0b       	sbc	r23, r19
 37e:	84 0b       	sbc	r24, r20
 380:	95 0b       	sbc	r25, r21
 382:	39 f4       	brne	.+14     	; 0x392 <__fp_cmp+0x38>
 384:	0a 26       	eor	r0, r26
 386:	61 f0       	breq	.+24     	; 0x3a0 <__fp_cmp+0x46>
 388:	23 2b       	or	r18, r19
 38a:	24 2b       	or	r18, r20
 38c:	25 2b       	or	r18, r21
 38e:	21 f4       	brne	.+8      	; 0x398 <__fp_cmp+0x3e>
 390:	08 95       	ret
 392:	0a 26       	eor	r0, r26
 394:	09 f4       	brne	.+2      	; 0x398 <__fp_cmp+0x3e>
 396:	a1 40       	sbci	r26, 0x01	; 1
 398:	a6 95       	lsr	r26
 39a:	8f ef       	ldi	r24, 0xFF	; 255
 39c:	81 1d       	adc	r24, r1
 39e:	81 1d       	adc	r24, r1
 3a0:	08 95       	ret

000003a2 <__fp_split3>:
 3a2:	57 fd       	sbrc	r21, 7
 3a4:	90 58       	subi	r25, 0x80	; 128
 3a6:	44 0f       	add	r20, r20
 3a8:	55 1f       	adc	r21, r21
 3aa:	59 f0       	breq	.+22     	; 0x3c2 <__fp_splitA+0x10>
 3ac:	5f 3f       	cpi	r21, 0xFF	; 255
 3ae:	71 f0       	breq	.+28     	; 0x3cc <__fp_splitA+0x1a>
 3b0:	47 95       	ror	r20

000003b2 <__fp_splitA>:
 3b2:	88 0f       	add	r24, r24
 3b4:	97 fb       	bst	r25, 7
 3b6:	99 1f       	adc	r25, r25
 3b8:	61 f0       	breq	.+24     	; 0x3d2 <__fp_splitA+0x20>
 3ba:	9f 3f       	cpi	r25, 0xFF	; 255
 3bc:	79 f0       	breq	.+30     	; 0x3dc <__fp_splitA+0x2a>
 3be:	87 95       	ror	r24
 3c0:	08 95       	ret
 3c2:	12 16       	cp	r1, r18
 3c4:	13 06       	cpc	r1, r19
 3c6:	14 06       	cpc	r1, r20
 3c8:	55 1f       	adc	r21, r21
 3ca:	f2 cf       	rjmp	.-28     	; 0x3b0 <__fp_split3+0xe>
 3cc:	46 95       	lsr	r20
 3ce:	f1 df       	rcall	.-30     	; 0x3b2 <__fp_splitA>
 3d0:	08 c0       	rjmp	.+16     	; 0x3e2 <__fp_splitA+0x30>
 3d2:	16 16       	cp	r1, r22
 3d4:	17 06       	cpc	r1, r23
 3d6:	18 06       	cpc	r1, r24
 3d8:	99 1f       	adc	r25, r25
 3da:	f1 cf       	rjmp	.-30     	; 0x3be <__fp_splitA+0xc>
 3dc:	86 95       	lsr	r24
 3de:	71 05       	cpc	r23, r1
 3e0:	61 05       	cpc	r22, r1
 3e2:	08 94       	sec
 3e4:	08 95       	ret

000003e6 <__fp_zero>:
 3e6:	e8 94       	clt

000003e8 <__fp_szero>:
 3e8:	bb 27       	eor	r27, r27
 3ea:	66 27       	eor	r22, r22
 3ec:	77 27       	eor	r23, r23
 3ee:	cb 01       	movw	r24, r22
 3f0:	97 f9       	bld	r25, 7
 3f2:	08 95       	ret

000003f4 <__gesf2>:
 3f4:	0e 94 ad 01 	call	0x35a	; 0x35a <__fp_cmp>
 3f8:	08 f4       	brcc	.+2      	; 0x3fc <__gesf2+0x8>
 3fa:	8f ef       	ldi	r24, 0xFF	; 255
 3fc:	08 95       	ret

000003fe <__mulsf3>:
 3fe:	0e 94 12 02 	call	0x424	; 0x424 <__mulsf3x>
 402:	0c 94 83 02 	jmp	0x506	; 0x506 <__fp_round>
 406:	0e 94 75 02 	call	0x4ea	; 0x4ea <__fp_pscA>
 40a:	38 f0       	brcs	.+14     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 40c:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <__fp_pscB>
 410:	20 f0       	brcs	.+8      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 412:	95 23       	and	r25, r21
 414:	11 f0       	breq	.+4      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 416:	0c 94 6c 02 	jmp	0x4d8	; 0x4d8 <__fp_inf>
 41a:	0c 94 72 02 	jmp	0x4e4	; 0x4e4 <__fp_nan>
 41e:	11 24       	eor	r1, r1
 420:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__fp_szero>

00000424 <__mulsf3x>:
 424:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <__fp_split3>
 428:	70 f3       	brcs	.-36     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>

0000042a <__mulsf3_pse>:
 42a:	95 9f       	mul	r25, r21
 42c:	c1 f3       	breq	.-16     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 42e:	95 0f       	add	r25, r21
 430:	50 e0       	ldi	r21, 0x00	; 0
 432:	55 1f       	adc	r21, r21
 434:	62 9f       	mul	r22, r18
 436:	f0 01       	movw	r30, r0
 438:	72 9f       	mul	r23, r18
 43a:	bb 27       	eor	r27, r27
 43c:	f0 0d       	add	r31, r0
 43e:	b1 1d       	adc	r27, r1
 440:	63 9f       	mul	r22, r19
 442:	aa 27       	eor	r26, r26
 444:	f0 0d       	add	r31, r0
 446:	b1 1d       	adc	r27, r1
 448:	aa 1f       	adc	r26, r26
 44a:	64 9f       	mul	r22, r20
 44c:	66 27       	eor	r22, r22
 44e:	b0 0d       	add	r27, r0
 450:	a1 1d       	adc	r26, r1
 452:	66 1f       	adc	r22, r22
 454:	82 9f       	mul	r24, r18
 456:	22 27       	eor	r18, r18
 458:	b0 0d       	add	r27, r0
 45a:	a1 1d       	adc	r26, r1
 45c:	62 1f       	adc	r22, r18
 45e:	73 9f       	mul	r23, r19
 460:	b0 0d       	add	r27, r0
 462:	a1 1d       	adc	r26, r1
 464:	62 1f       	adc	r22, r18
 466:	83 9f       	mul	r24, r19
 468:	a0 0d       	add	r26, r0
 46a:	61 1d       	adc	r22, r1
 46c:	22 1f       	adc	r18, r18
 46e:	74 9f       	mul	r23, r20
 470:	33 27       	eor	r19, r19
 472:	a0 0d       	add	r26, r0
 474:	61 1d       	adc	r22, r1
 476:	23 1f       	adc	r18, r19
 478:	84 9f       	mul	r24, r20
 47a:	60 0d       	add	r22, r0
 47c:	21 1d       	adc	r18, r1
 47e:	82 2f       	mov	r24, r18
 480:	76 2f       	mov	r23, r22
 482:	6a 2f       	mov	r22, r26
 484:	11 24       	eor	r1, r1
 486:	9f 57       	subi	r25, 0x7F	; 127
 488:	50 40       	sbci	r21, 0x00	; 0
 48a:	9a f0       	brmi	.+38     	; 0x4b2 <__mulsf3_pse+0x88>
 48c:	f1 f0       	breq	.+60     	; 0x4ca <__mulsf3_pse+0xa0>
 48e:	88 23       	and	r24, r24
 490:	4a f0       	brmi	.+18     	; 0x4a4 <__mulsf3_pse+0x7a>
 492:	ee 0f       	add	r30, r30
 494:	ff 1f       	adc	r31, r31
 496:	bb 1f       	adc	r27, r27
 498:	66 1f       	adc	r22, r22
 49a:	77 1f       	adc	r23, r23
 49c:	88 1f       	adc	r24, r24
 49e:	91 50       	subi	r25, 0x01	; 1
 4a0:	50 40       	sbci	r21, 0x00	; 0
 4a2:	a9 f7       	brne	.-22     	; 0x48e <__mulsf3_pse+0x64>
 4a4:	9e 3f       	cpi	r25, 0xFE	; 254
 4a6:	51 05       	cpc	r21, r1
 4a8:	80 f0       	brcs	.+32     	; 0x4ca <__mulsf3_pse+0xa0>
 4aa:	0c 94 6c 02 	jmp	0x4d8	; 0x4d8 <__fp_inf>
 4ae:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <__fp_szero>
 4b2:	5f 3f       	cpi	r21, 0xFF	; 255
 4b4:	e4 f3       	brlt	.-8      	; 0x4ae <__mulsf3_pse+0x84>
 4b6:	98 3e       	cpi	r25, 0xE8	; 232
 4b8:	d4 f3       	brlt	.-12     	; 0x4ae <__mulsf3_pse+0x84>
 4ba:	86 95       	lsr	r24
 4bc:	77 95       	ror	r23
 4be:	67 95       	ror	r22
 4c0:	b7 95       	ror	r27
 4c2:	f7 95       	ror	r31
 4c4:	e7 95       	ror	r30
 4c6:	9f 5f       	subi	r25, 0xFF	; 255
 4c8:	c1 f7       	brne	.-16     	; 0x4ba <__mulsf3_pse+0x90>
 4ca:	fe 2b       	or	r31, r30
 4cc:	88 0f       	add	r24, r24
 4ce:	91 1d       	adc	r25, r1
 4d0:	96 95       	lsr	r25
 4d2:	87 95       	ror	r24
 4d4:	97 f9       	bld	r25, 7
 4d6:	08 95       	ret

000004d8 <__fp_inf>:
 4d8:	97 f9       	bld	r25, 7
 4da:	9f 67       	ori	r25, 0x7F	; 127
 4dc:	80 e8       	ldi	r24, 0x80	; 128
 4de:	70 e0       	ldi	r23, 0x00	; 0
 4e0:	60 e0       	ldi	r22, 0x00	; 0
 4e2:	08 95       	ret

000004e4 <__fp_nan>:
 4e4:	9f ef       	ldi	r25, 0xFF	; 255
 4e6:	80 ec       	ldi	r24, 0xC0	; 192
 4e8:	08 95       	ret

000004ea <__fp_pscA>:
 4ea:	00 24       	eor	r0, r0
 4ec:	0a 94       	dec	r0
 4ee:	16 16       	cp	r1, r22
 4f0:	17 06       	cpc	r1, r23
 4f2:	18 06       	cpc	r1, r24
 4f4:	09 06       	cpc	r0, r25
 4f6:	08 95       	ret

000004f8 <__fp_pscB>:
 4f8:	00 24       	eor	r0, r0
 4fa:	0a 94       	dec	r0
 4fc:	12 16       	cp	r1, r18
 4fe:	13 06       	cpc	r1, r19
 500:	14 06       	cpc	r1, r20
 502:	05 06       	cpc	r0, r21
 504:	08 95       	ret

00000506 <__fp_round>:
 506:	09 2e       	mov	r0, r25
 508:	03 94       	inc	r0
 50a:	00 0c       	add	r0, r0
 50c:	11 f4       	brne	.+4      	; 0x512 <__fp_round+0xc>
 50e:	88 23       	and	r24, r24
 510:	52 f0       	brmi	.+20     	; 0x526 <__fp_round+0x20>
 512:	bb 0f       	add	r27, r27
 514:	40 f4       	brcc	.+16     	; 0x526 <__fp_round+0x20>
 516:	bf 2b       	or	r27, r31
 518:	11 f4       	brne	.+4      	; 0x51e <__fp_round+0x18>
 51a:	60 ff       	sbrs	r22, 0
 51c:	04 c0       	rjmp	.+8      	; 0x526 <__fp_round+0x20>
 51e:	6f 5f       	subi	r22, 0xFF	; 255
 520:	7f 4f       	sbci	r23, 0xFF	; 255
 522:	8f 4f       	sbci	r24, 0xFF	; 255
 524:	9f 4f       	sbci	r25, 0xFF	; 255
 526:	08 95       	ret

00000528 <_exit>:
 528:	f8 94       	cli

0000052a <__stop_program>:
 52a:	ff cf       	rjmp	.-2      	; 0x52a <__stop_program>
