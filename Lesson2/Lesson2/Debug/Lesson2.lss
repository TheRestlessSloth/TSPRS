
Lesson2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000006e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000694  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000006e8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000718  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000758  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000086c  00000000  00000000  00000778  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000657  00000000  00000000  00000fe4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003a3  00000000  00000000  0000163b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000019e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000398  00000000  00000000  00001a14  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000047  00000000  00000000  00001dac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001df3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 48 03 	jmp	0x690	; 0x690 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <avr/io.h>
#define F_CPU 16000000UL
#include <util/delay.h>

int main(void)
{
  80:	cf 93       	push	r28
  82:	df 93       	push	r29
  84:	cd b7       	in	r28, 0x3d	; 61
  86:	de b7       	in	r29, 0x3e	; 62
  88:	e8 97       	sbiw	r28, 0x38	; 56
  8a:	0f b6       	in	r0, 0x3f	; 63
  8c:	f8 94       	cli
  8e:	de bf       	out	0x3e, r29	; 62
  90:	0f be       	out	0x3f, r0	; 63
  92:	cd bf       	out	0x3d, r28	; 61
	DDRD = 0xFF;
  94:	8a e2       	ldi	r24, 0x2A	; 42
  96:	90 e0       	ldi	r25, 0x00	; 0
  98:	2f ef       	ldi	r18, 0xFF	; 255
  9a:	fc 01       	movw	r30, r24
  9c:	20 83       	st	Z, r18
	TCCR0A = 0xFF;
  9e:	84 e4       	ldi	r24, 0x44	; 68
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	2f ef       	ldi	r18, 0xFF	; 255
  a4:	fc 01       	movw	r30, r24
  a6:	20 83       	st	Z, r18
    /* Replace with your application code */
    while (1) 
    {
		OCR0A = 33;
  a8:	87 e4       	ldi	r24, 0x47	; 71
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	21 e2       	ldi	r18, 0x21	; 33
  ae:	fc 01       	movw	r30, r24
  b0:	20 83       	st	Z, r18
  b2:	80 e0       	ldi	r24, 0x00	; 0
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	aa e7       	ldi	r26, 0x7A	; 122
  b8:	b4 e4       	ldi	r27, 0x44	; 68
  ba:	89 83       	std	Y+1, r24	; 0x01
  bc:	9a 83       	std	Y+2, r25	; 0x02
  be:	ab 83       	std	Y+3, r26	; 0x03
  c0:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
  c2:	20 e0       	ldi	r18, 0x00	; 0
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	4a e7       	ldi	r20, 0x7A	; 122
  c8:	55 e4       	ldi	r21, 0x45	; 69
  ca:	69 81       	ldd	r22, Y+1	; 0x01
  cc:	7a 81       	ldd	r23, Y+2	; 0x02
  ce:	8b 81       	ldd	r24, Y+3	; 0x03
  d0:	9c 81       	ldd	r25, Y+4	; 0x04
  d2:	0e 94 b3 02 	call	0x566	; 0x566 <__mulsf3>
  d6:	dc 01       	movw	r26, r24
  d8:	cb 01       	movw	r24, r22
  da:	8f a7       	std	Y+47, r24	; 0x2f
  dc:	98 ab       	std	Y+48, r25	; 0x30
  de:	a9 ab       	std	Y+49, r26	; 0x31
  e0:	ba ab       	std	Y+50, r27	; 0x32
	if (__tmp < 1.0)
  e2:	20 e0       	ldi	r18, 0x00	; 0
  e4:	30 e0       	ldi	r19, 0x00	; 0
  e6:	40 e8       	ldi	r20, 0x80	; 128
  e8:	5f e3       	ldi	r21, 0x3F	; 63
  ea:	6f a5       	ldd	r22, Y+47	; 0x2f
  ec:	78 a9       	ldd	r23, Y+48	; 0x30
  ee:	89 a9       	ldd	r24, Y+49	; 0x31
  f0:	9a a9       	ldd	r25, Y+50	; 0x32
  f2:	0e 94 2d 02 	call	0x45a	; 0x45a <__cmpsf2>
  f6:	88 23       	and	r24, r24
  f8:	2c f4       	brge	.+10     	; 0x104 <main+0x84>
		__ticks = 1;
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	9c ab       	std	Y+52, r25	; 0x34
 100:	8b ab       	std	Y+51, r24	; 0x33
 102:	3e c0       	rjmp	.+124    	; 0x180 <main+0x100>
	else if (__tmp > 65535)
 104:	20 e0       	ldi	r18, 0x00	; 0
 106:	3f ef       	ldi	r19, 0xFF	; 255
 108:	4f e7       	ldi	r20, 0x7F	; 127
 10a:	57 e4       	ldi	r21, 0x47	; 71
 10c:	6f a5       	ldd	r22, Y+47	; 0x2f
 10e:	78 a9       	ldd	r23, Y+48	; 0x30
 110:	89 a9       	ldd	r24, Y+49	; 0x31
 112:	9a a9       	ldd	r25, Y+50	; 0x32
 114:	0e 94 ae 02 	call	0x55c	; 0x55c <__gesf2>
 118:	18 16       	cp	r1, r24
 11a:	44 f5       	brge	.+80     	; 0x16c <main+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 11c:	20 e0       	ldi	r18, 0x00	; 0
 11e:	30 e0       	ldi	r19, 0x00	; 0
 120:	40 e2       	ldi	r20, 0x20	; 32
 122:	51 e4       	ldi	r21, 0x41	; 65
 124:	69 81       	ldd	r22, Y+1	; 0x01
 126:	7a 81       	ldd	r23, Y+2	; 0x02
 128:	8b 81       	ldd	r24, Y+3	; 0x03
 12a:	9c 81       	ldd	r25, Y+4	; 0x04
 12c:	0e 94 b3 02 	call	0x566	; 0x566 <__mulsf3>
 130:	dc 01       	movw	r26, r24
 132:	cb 01       	movw	r24, r22
 134:	bc 01       	movw	r22, r24
 136:	cd 01       	movw	r24, r26
 138:	0e 94 32 02 	call	0x464	; 0x464 <__fixunssfsi>
 13c:	dc 01       	movw	r26, r24
 13e:	cb 01       	movw	r24, r22
 140:	9c ab       	std	Y+52, r25	; 0x34
 142:	8b ab       	std	Y+51, r24	; 0x33
		while(__ticks)
 144:	8b a9       	ldd	r24, Y+51	; 0x33
 146:	9c a9       	ldd	r25, Y+52	; 0x34
 148:	89 2b       	or	r24, r25
 14a:	21 f1       	breq	.+72     	; 0x194 <main+0x114>
 14c:	80 e9       	ldi	r24, 0x90	; 144
 14e:	91 e0       	ldi	r25, 0x01	; 1
 150:	9e ab       	std	Y+54, r25	; 0x36
 152:	8d ab       	std	Y+53, r24	; 0x35
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
 154:	8d a9       	ldd	r24, Y+53	; 0x35
 156:	9e a9       	ldd	r25, Y+54	; 0x36
 158:	01 97       	sbiw	r24, 0x01	; 1
 15a:	f1 f7       	brne	.-4      	; 0x158 <main+0xd8>
 15c:	9e ab       	std	Y+54, r25	; 0x36
 15e:	8d ab       	std	Y+53, r24	; 0x35
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 160:	8b a9       	ldd	r24, Y+51	; 0x33
 162:	9c a9       	ldd	r25, Y+52	; 0x34
 164:	01 97       	sbiw	r24, 0x01	; 1
 166:	9c ab       	std	Y+52, r25	; 0x34
 168:	8b ab       	std	Y+51, r24	; 0x33
 16a:	ec cf       	rjmp	.-40     	; 0x144 <main+0xc4>
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 16c:	6f a5       	ldd	r22, Y+47	; 0x2f
 16e:	78 a9       	ldd	r23, Y+48	; 0x30
 170:	89 a9       	ldd	r24, Y+49	; 0x31
 172:	9a a9       	ldd	r25, Y+50	; 0x32
 174:	0e 94 32 02 	call	0x464	; 0x464 <__fixunssfsi>
 178:	dc 01       	movw	r26, r24
 17a:	cb 01       	movw	r24, r22
 17c:	9c ab       	std	Y+52, r25	; 0x34
 17e:	8b ab       	std	Y+51, r24	; 0x33
 180:	8b a9       	ldd	r24, Y+51	; 0x33
 182:	9c a9       	ldd	r25, Y+52	; 0x34
 184:	98 af       	std	Y+56, r25	; 0x38
 186:	8f ab       	std	Y+55, r24	; 0x37
 188:	8f a9       	ldd	r24, Y+55	; 0x37
 18a:	98 ad       	ldd	r25, Y+56	; 0x38
 18c:	01 97       	sbiw	r24, 0x01	; 1
 18e:	f1 f7       	brne	.-4      	; 0x18c <main+0x10c>
 190:	98 af       	std	Y+56, r25	; 0x38
 192:	8f ab       	std	Y+55, r24	; 0x37
		_delay_ms(1000);
		OCR0A = 100;
 194:	87 e4       	ldi	r24, 0x47	; 71
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	24 e6       	ldi	r18, 0x64	; 100
 19a:	fc 01       	movw	r30, r24
 19c:	20 83       	st	Z, r18
 19e:	80 e0       	ldi	r24, 0x00	; 0
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	aa e7       	ldi	r26, 0x7A	; 122
 1a4:	b4 e4       	ldi	r27, 0x44	; 68
 1a6:	8d 83       	std	Y+5, r24	; 0x05
 1a8:	9e 83       	std	Y+6, r25	; 0x06
 1aa:	af 83       	std	Y+7, r26	; 0x07
 1ac:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 1ae:	20 e0       	ldi	r18, 0x00	; 0
 1b0:	30 e0       	ldi	r19, 0x00	; 0
 1b2:	4a e7       	ldi	r20, 0x7A	; 122
 1b4:	55 e4       	ldi	r21, 0x45	; 69
 1b6:	6d 81       	ldd	r22, Y+5	; 0x05
 1b8:	7e 81       	ldd	r23, Y+6	; 0x06
 1ba:	8f 81       	ldd	r24, Y+7	; 0x07
 1bc:	98 85       	ldd	r25, Y+8	; 0x08
 1be:	0e 94 b3 02 	call	0x566	; 0x566 <__mulsf3>
 1c2:	dc 01       	movw	r26, r24
 1c4:	cb 01       	movw	r24, r22
 1c6:	8d a3       	std	Y+37, r24	; 0x25
 1c8:	9e a3       	std	Y+38, r25	; 0x26
 1ca:	af a3       	std	Y+39, r26	; 0x27
 1cc:	b8 a7       	std	Y+40, r27	; 0x28
	if (__tmp < 1.0)
 1ce:	20 e0       	ldi	r18, 0x00	; 0
 1d0:	30 e0       	ldi	r19, 0x00	; 0
 1d2:	40 e8       	ldi	r20, 0x80	; 128
 1d4:	5f e3       	ldi	r21, 0x3F	; 63
 1d6:	6d a1       	ldd	r22, Y+37	; 0x25
 1d8:	7e a1       	ldd	r23, Y+38	; 0x26
 1da:	8f a1       	ldd	r24, Y+39	; 0x27
 1dc:	98 a5       	ldd	r25, Y+40	; 0x28
 1de:	0e 94 2d 02 	call	0x45a	; 0x45a <__cmpsf2>
 1e2:	88 23       	and	r24, r24
 1e4:	2c f4       	brge	.+10     	; 0x1f0 <main+0x170>
		__ticks = 1;
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	9a a7       	std	Y+42, r25	; 0x2a
 1ec:	89 a7       	std	Y+41, r24	; 0x29
 1ee:	3e c0       	rjmp	.+124    	; 0x26c <main+0x1ec>
	else if (__tmp > 65535)
 1f0:	20 e0       	ldi	r18, 0x00	; 0
 1f2:	3f ef       	ldi	r19, 0xFF	; 255
 1f4:	4f e7       	ldi	r20, 0x7F	; 127
 1f6:	57 e4       	ldi	r21, 0x47	; 71
 1f8:	6d a1       	ldd	r22, Y+37	; 0x25
 1fa:	7e a1       	ldd	r23, Y+38	; 0x26
 1fc:	8f a1       	ldd	r24, Y+39	; 0x27
 1fe:	98 a5       	ldd	r25, Y+40	; 0x28
 200:	0e 94 ae 02 	call	0x55c	; 0x55c <__gesf2>
 204:	18 16       	cp	r1, r24
 206:	44 f5       	brge	.+80     	; 0x258 <main+0x1d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 208:	20 e0       	ldi	r18, 0x00	; 0
 20a:	30 e0       	ldi	r19, 0x00	; 0
 20c:	40 e2       	ldi	r20, 0x20	; 32
 20e:	51 e4       	ldi	r21, 0x41	; 65
 210:	6d 81       	ldd	r22, Y+5	; 0x05
 212:	7e 81       	ldd	r23, Y+6	; 0x06
 214:	8f 81       	ldd	r24, Y+7	; 0x07
 216:	98 85       	ldd	r25, Y+8	; 0x08
 218:	0e 94 b3 02 	call	0x566	; 0x566 <__mulsf3>
 21c:	dc 01       	movw	r26, r24
 21e:	cb 01       	movw	r24, r22
 220:	bc 01       	movw	r22, r24
 222:	cd 01       	movw	r24, r26
 224:	0e 94 32 02 	call	0x464	; 0x464 <__fixunssfsi>
 228:	dc 01       	movw	r26, r24
 22a:	cb 01       	movw	r24, r22
 22c:	9a a7       	std	Y+42, r25	; 0x2a
 22e:	89 a7       	std	Y+41, r24	; 0x29
		while(__ticks)
 230:	89 a5       	ldd	r24, Y+41	; 0x29
 232:	9a a5       	ldd	r25, Y+42	; 0x2a
 234:	89 2b       	or	r24, r25
 236:	21 f1       	breq	.+72     	; 0x280 <main+0x200>
 238:	80 e9       	ldi	r24, 0x90	; 144
 23a:	91 e0       	ldi	r25, 0x01	; 1
 23c:	9c a7       	std	Y+44, r25	; 0x2c
 23e:	8b a7       	std	Y+43, r24	; 0x2b
 240:	8b a5       	ldd	r24, Y+43	; 0x2b
 242:	9c a5       	ldd	r25, Y+44	; 0x2c
 244:	01 97       	sbiw	r24, 0x01	; 1
 246:	f1 f7       	brne	.-4      	; 0x244 <main+0x1c4>
 248:	9c a7       	std	Y+44, r25	; 0x2c
 24a:	8b a7       	std	Y+43, r24	; 0x2b
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 24c:	89 a5       	ldd	r24, Y+41	; 0x29
 24e:	9a a5       	ldd	r25, Y+42	; 0x2a
 250:	01 97       	sbiw	r24, 0x01	; 1
 252:	9a a7       	std	Y+42, r25	; 0x2a
 254:	89 a7       	std	Y+41, r24	; 0x29
 256:	ec cf       	rjmp	.-40     	; 0x230 <main+0x1b0>
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 258:	6d a1       	ldd	r22, Y+37	; 0x25
 25a:	7e a1       	ldd	r23, Y+38	; 0x26
 25c:	8f a1       	ldd	r24, Y+39	; 0x27
 25e:	98 a5       	ldd	r25, Y+40	; 0x28
 260:	0e 94 32 02 	call	0x464	; 0x464 <__fixunssfsi>
 264:	dc 01       	movw	r26, r24
 266:	cb 01       	movw	r24, r22
 268:	9a a7       	std	Y+42, r25	; 0x2a
 26a:	89 a7       	std	Y+41, r24	; 0x29
 26c:	89 a5       	ldd	r24, Y+41	; 0x29
 26e:	9a a5       	ldd	r25, Y+42	; 0x2a
 270:	9e a7       	std	Y+46, r25	; 0x2e
 272:	8d a7       	std	Y+45, r24	; 0x2d
 274:	8d a5       	ldd	r24, Y+45	; 0x2d
 276:	9e a5       	ldd	r25, Y+46	; 0x2e
 278:	01 97       	sbiw	r24, 0x01	; 1
 27a:	f1 f7       	brne	.-4      	; 0x278 <main+0x1f8>
 27c:	9e a7       	std	Y+46, r25	; 0x2e
 27e:	8d a7       	std	Y+45, r24	; 0x2d
		_delay_ms(1000);
		OCR0A = 255;
 280:	87 e4       	ldi	r24, 0x47	; 71
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	2f ef       	ldi	r18, 0xFF	; 255
 286:	fc 01       	movw	r30, r24
 288:	20 83       	st	Z, r18
 28a:	80 e0       	ldi	r24, 0x00	; 0
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	aa e7       	ldi	r26, 0x7A	; 122
 290:	b4 e4       	ldi	r27, 0x44	; 68
 292:	89 87       	std	Y+9, r24	; 0x09
 294:	9a 87       	std	Y+10, r25	; 0x0a
 296:	ab 87       	std	Y+11, r26	; 0x0b
 298:	bc 87       	std	Y+12, r27	; 0x0c

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 29a:	20 e0       	ldi	r18, 0x00	; 0
 29c:	30 e0       	ldi	r19, 0x00	; 0
 29e:	4a e7       	ldi	r20, 0x7A	; 122
 2a0:	55 e4       	ldi	r21, 0x45	; 69
 2a2:	69 85       	ldd	r22, Y+9	; 0x09
 2a4:	7a 85       	ldd	r23, Y+10	; 0x0a
 2a6:	8b 85       	ldd	r24, Y+11	; 0x0b
 2a8:	9c 85       	ldd	r25, Y+12	; 0x0c
 2aa:	0e 94 b3 02 	call	0x566	; 0x566 <__mulsf3>
 2ae:	dc 01       	movw	r26, r24
 2b0:	cb 01       	movw	r24, r22
 2b2:	8b 8f       	std	Y+27, r24	; 0x1b
 2b4:	9c 8f       	std	Y+28, r25	; 0x1c
 2b6:	ad 8f       	std	Y+29, r26	; 0x1d
 2b8:	be 8f       	std	Y+30, r27	; 0x1e
	if (__tmp < 1.0)
 2ba:	20 e0       	ldi	r18, 0x00	; 0
 2bc:	30 e0       	ldi	r19, 0x00	; 0
 2be:	40 e8       	ldi	r20, 0x80	; 128
 2c0:	5f e3       	ldi	r21, 0x3F	; 63
 2c2:	6b 8d       	ldd	r22, Y+27	; 0x1b
 2c4:	7c 8d       	ldd	r23, Y+28	; 0x1c
 2c6:	8d 8d       	ldd	r24, Y+29	; 0x1d
 2c8:	9e 8d       	ldd	r25, Y+30	; 0x1e
 2ca:	0e 94 2d 02 	call	0x45a	; 0x45a <__cmpsf2>
 2ce:	88 23       	and	r24, r24
 2d0:	2c f4       	brge	.+10     	; 0x2dc <main+0x25c>
		__ticks = 1;
 2d2:	81 e0       	ldi	r24, 0x01	; 1
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	98 a3       	std	Y+32, r25	; 0x20
 2d8:	8f 8f       	std	Y+31, r24	; 0x1f
 2da:	3e c0       	rjmp	.+124    	; 0x358 <main+0x2d8>
	else if (__tmp > 65535)
 2dc:	20 e0       	ldi	r18, 0x00	; 0
 2de:	3f ef       	ldi	r19, 0xFF	; 255
 2e0:	4f e7       	ldi	r20, 0x7F	; 127
 2e2:	57 e4       	ldi	r21, 0x47	; 71
 2e4:	6b 8d       	ldd	r22, Y+27	; 0x1b
 2e6:	7c 8d       	ldd	r23, Y+28	; 0x1c
 2e8:	8d 8d       	ldd	r24, Y+29	; 0x1d
 2ea:	9e 8d       	ldd	r25, Y+30	; 0x1e
 2ec:	0e 94 ae 02 	call	0x55c	; 0x55c <__gesf2>
 2f0:	18 16       	cp	r1, r24
 2f2:	44 f5       	brge	.+80     	; 0x344 <main+0x2c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 2f4:	20 e0       	ldi	r18, 0x00	; 0
 2f6:	30 e0       	ldi	r19, 0x00	; 0
 2f8:	40 e2       	ldi	r20, 0x20	; 32
 2fa:	51 e4       	ldi	r21, 0x41	; 65
 2fc:	69 85       	ldd	r22, Y+9	; 0x09
 2fe:	7a 85       	ldd	r23, Y+10	; 0x0a
 300:	8b 85       	ldd	r24, Y+11	; 0x0b
 302:	9c 85       	ldd	r25, Y+12	; 0x0c
 304:	0e 94 b3 02 	call	0x566	; 0x566 <__mulsf3>
 308:	dc 01       	movw	r26, r24
 30a:	cb 01       	movw	r24, r22
 30c:	bc 01       	movw	r22, r24
 30e:	cd 01       	movw	r24, r26
 310:	0e 94 32 02 	call	0x464	; 0x464 <__fixunssfsi>
 314:	dc 01       	movw	r26, r24
 316:	cb 01       	movw	r24, r22
 318:	98 a3       	std	Y+32, r25	; 0x20
 31a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
 31c:	8f 8d       	ldd	r24, Y+31	; 0x1f
 31e:	98 a1       	ldd	r25, Y+32	; 0x20
 320:	89 2b       	or	r24, r25
 322:	21 f1       	breq	.+72     	; 0x36c <main+0x2ec>
 324:	80 e9       	ldi	r24, 0x90	; 144
 326:	91 e0       	ldi	r25, 0x01	; 1
 328:	9a a3       	std	Y+34, r25	; 0x22
 32a:	89 a3       	std	Y+33, r24	; 0x21
 32c:	89 a1       	ldd	r24, Y+33	; 0x21
 32e:	9a a1       	ldd	r25, Y+34	; 0x22
 330:	01 97       	sbiw	r24, 0x01	; 1
 332:	f1 f7       	brne	.-4      	; 0x330 <main+0x2b0>
 334:	9a a3       	std	Y+34, r25	; 0x22
 336:	89 a3       	std	Y+33, r24	; 0x21
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 338:	8f 8d       	ldd	r24, Y+31	; 0x1f
 33a:	98 a1       	ldd	r25, Y+32	; 0x20
 33c:	01 97       	sbiw	r24, 0x01	; 1
 33e:	98 a3       	std	Y+32, r25	; 0x20
 340:	8f 8f       	std	Y+31, r24	; 0x1f
 342:	ec cf       	rjmp	.-40     	; 0x31c <main+0x29c>
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 344:	6b 8d       	ldd	r22, Y+27	; 0x1b
 346:	7c 8d       	ldd	r23, Y+28	; 0x1c
 348:	8d 8d       	ldd	r24, Y+29	; 0x1d
 34a:	9e 8d       	ldd	r25, Y+30	; 0x1e
 34c:	0e 94 32 02 	call	0x464	; 0x464 <__fixunssfsi>
 350:	dc 01       	movw	r26, r24
 352:	cb 01       	movw	r24, r22
 354:	98 a3       	std	Y+32, r25	; 0x20
 356:	8f 8f       	std	Y+31, r24	; 0x1f
 358:	8f 8d       	ldd	r24, Y+31	; 0x1f
 35a:	98 a1       	ldd	r25, Y+32	; 0x20
 35c:	9c a3       	std	Y+36, r25	; 0x24
 35e:	8b a3       	std	Y+35, r24	; 0x23
 360:	8b a1       	ldd	r24, Y+35	; 0x23
 362:	9c a1       	ldd	r25, Y+36	; 0x24
 364:	01 97       	sbiw	r24, 0x01	; 1
 366:	f1 f7       	brne	.-4      	; 0x364 <main+0x2e4>
 368:	9c a3       	std	Y+36, r25	; 0x24
 36a:	8b a3       	std	Y+35, r24	; 0x23
		_delay_ms(1000);
		OCR0A = 0;
 36c:	87 e4       	ldi	r24, 0x47	; 71
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	fc 01       	movw	r30, r24
 372:	10 82       	st	Z, r1
 374:	80 e0       	ldi	r24, 0x00	; 0
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	aa e7       	ldi	r26, 0x7A	; 122
 37a:	b4 e4       	ldi	r27, 0x44	; 68
 37c:	8d 87       	std	Y+13, r24	; 0x0d
 37e:	9e 87       	std	Y+14, r25	; 0x0e
 380:	af 87       	std	Y+15, r26	; 0x0f
 382:	b8 8b       	std	Y+16, r27	; 0x10

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 384:	20 e0       	ldi	r18, 0x00	; 0
 386:	30 e0       	ldi	r19, 0x00	; 0
 388:	4a e7       	ldi	r20, 0x7A	; 122
 38a:	55 e4       	ldi	r21, 0x45	; 69
 38c:	6d 85       	ldd	r22, Y+13	; 0x0d
 38e:	7e 85       	ldd	r23, Y+14	; 0x0e
 390:	8f 85       	ldd	r24, Y+15	; 0x0f
 392:	98 89       	ldd	r25, Y+16	; 0x10
 394:	0e 94 b3 02 	call	0x566	; 0x566 <__mulsf3>
 398:	dc 01       	movw	r26, r24
 39a:	cb 01       	movw	r24, r22
 39c:	89 8b       	std	Y+17, r24	; 0x11
 39e:	9a 8b       	std	Y+18, r25	; 0x12
 3a0:	ab 8b       	std	Y+19, r26	; 0x13
 3a2:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
 3a4:	20 e0       	ldi	r18, 0x00	; 0
 3a6:	30 e0       	ldi	r19, 0x00	; 0
 3a8:	40 e8       	ldi	r20, 0x80	; 128
 3aa:	5f e3       	ldi	r21, 0x3F	; 63
 3ac:	69 89       	ldd	r22, Y+17	; 0x11
 3ae:	7a 89       	ldd	r23, Y+18	; 0x12
 3b0:	8b 89       	ldd	r24, Y+19	; 0x13
 3b2:	9c 89       	ldd	r25, Y+20	; 0x14
 3b4:	0e 94 2d 02 	call	0x45a	; 0x45a <__cmpsf2>
 3b8:	88 23       	and	r24, r24
 3ba:	2c f4       	brge	.+10     	; 0x3c6 <main+0x346>
		__ticks = 1;
 3bc:	81 e0       	ldi	r24, 0x01	; 1
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	9e 8b       	std	Y+22, r25	; 0x16
 3c2:	8d 8b       	std	Y+21, r24	; 0x15
 3c4:	3f c0       	rjmp	.+126    	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
	else if (__tmp > 65535)
 3c6:	20 e0       	ldi	r18, 0x00	; 0
 3c8:	3f ef       	ldi	r19, 0xFF	; 255
 3ca:	4f e7       	ldi	r20, 0x7F	; 127
 3cc:	57 e4       	ldi	r21, 0x47	; 71
 3ce:	69 89       	ldd	r22, Y+17	; 0x11
 3d0:	7a 89       	ldd	r23, Y+18	; 0x12
 3d2:	8b 89       	ldd	r24, Y+19	; 0x13
 3d4:	9c 89       	ldd	r25, Y+20	; 0x14
 3d6:	0e 94 ae 02 	call	0x55c	; 0x55c <__gesf2>
 3da:	18 16       	cp	r1, r24
 3dc:	4c f5       	brge	.+82     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 3de:	20 e0       	ldi	r18, 0x00	; 0
 3e0:	30 e0       	ldi	r19, 0x00	; 0
 3e2:	40 e2       	ldi	r20, 0x20	; 32
 3e4:	51 e4       	ldi	r21, 0x41	; 65
 3e6:	6d 85       	ldd	r22, Y+13	; 0x0d
 3e8:	7e 85       	ldd	r23, Y+14	; 0x0e
 3ea:	8f 85       	ldd	r24, Y+15	; 0x0f
 3ec:	98 89       	ldd	r25, Y+16	; 0x10
 3ee:	0e 94 b3 02 	call	0x566	; 0x566 <__mulsf3>
 3f2:	dc 01       	movw	r26, r24
 3f4:	cb 01       	movw	r24, r22
 3f6:	bc 01       	movw	r22, r24
 3f8:	cd 01       	movw	r24, r26
 3fa:	0e 94 32 02 	call	0x464	; 0x464 <__fixunssfsi>
 3fe:	dc 01       	movw	r26, r24
 400:	cb 01       	movw	r24, r22
 402:	9e 8b       	std	Y+22, r25	; 0x16
 404:	8d 8b       	std	Y+21, r24	; 0x15
		while(__ticks)
 406:	8d 89       	ldd	r24, Y+21	; 0x15
 408:	9e 89       	ldd	r25, Y+22	; 0x16
 40a:	89 2b       	or	r24, r25
 40c:	09 f4       	brne	.+2      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 40e:	4c ce       	rjmp	.-872    	; 0xa8 <main+0x28>
 410:	80 e9       	ldi	r24, 0x90	; 144
 412:	91 e0       	ldi	r25, 0x01	; 1
 414:	98 8f       	std	Y+24, r25	; 0x18
 416:	8f 8b       	std	Y+23, r24	; 0x17
 418:	8f 89       	ldd	r24, Y+23	; 0x17
 41a:	98 8d       	ldd	r25, Y+24	; 0x18
 41c:	01 97       	sbiw	r24, 0x01	; 1
 41e:	f1 f7       	brne	.-4      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 420:	98 8f       	std	Y+24, r25	; 0x18
 422:	8f 8b       	std	Y+23, r24	; 0x17
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 424:	8d 89       	ldd	r24, Y+21	; 0x15
 426:	9e 89       	ldd	r25, Y+22	; 0x16
 428:	01 97       	sbiw	r24, 0x01	; 1
 42a:	9e 8b       	std	Y+22, r25	; 0x16
 42c:	8d 8b       	std	Y+21, r24	; 0x15
 42e:	eb cf       	rjmp	.-42     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 430:	69 89       	ldd	r22, Y+17	; 0x11
 432:	7a 89       	ldd	r23, Y+18	; 0x12
 434:	8b 89       	ldd	r24, Y+19	; 0x13
 436:	9c 89       	ldd	r25, Y+20	; 0x14
 438:	0e 94 32 02 	call	0x464	; 0x464 <__fixunssfsi>
 43c:	dc 01       	movw	r26, r24
 43e:	cb 01       	movw	r24, r22
 440:	9e 8b       	std	Y+22, r25	; 0x16
 442:	8d 8b       	std	Y+21, r24	; 0x15
 444:	8d 89       	ldd	r24, Y+21	; 0x15
 446:	9e 89       	ldd	r25, Y+22	; 0x16
 448:	9a 8f       	std	Y+26, r25	; 0x1a
 44a:	89 8f       	std	Y+25, r24	; 0x19
 44c:	89 8d       	ldd	r24, Y+25	; 0x19
 44e:	9a 8d       	ldd	r25, Y+26	; 0x1a
 450:	01 97       	sbiw	r24, 0x01	; 1
 452:	f1 f7       	brne	.-4      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 454:	9a 8f       	std	Y+26, r25	; 0x1a
 456:	89 8f       	std	Y+25, r24	; 0x19
int main(void)
{
	DDRD = 0xFF;
	TCCR0A = 0xFF;
    /* Replace with your application code */
    while (1) 
 458:	27 ce       	rjmp	.-946    	; 0xa8 <main+0x28>

0000045a <__cmpsf2>:
 45a:	0e 94 61 02 	call	0x4c2	; 0x4c2 <__fp_cmp>
 45e:	08 f4       	brcc	.+2      	; 0x462 <__cmpsf2+0x8>
 460:	81 e0       	ldi	r24, 0x01	; 1
 462:	08 95       	ret

00000464 <__fixunssfsi>:
 464:	0e 94 8d 02 	call	0x51a	; 0x51a <__fp_splitA>
 468:	88 f0       	brcs	.+34     	; 0x48c <__fixunssfsi+0x28>
 46a:	9f 57       	subi	r25, 0x7F	; 127
 46c:	98 f0       	brcs	.+38     	; 0x494 <__fixunssfsi+0x30>
 46e:	b9 2f       	mov	r27, r25
 470:	99 27       	eor	r25, r25
 472:	b7 51       	subi	r27, 0x17	; 23
 474:	b0 f0       	brcs	.+44     	; 0x4a2 <__fixunssfsi+0x3e>
 476:	e1 f0       	breq	.+56     	; 0x4b0 <__fixunssfsi+0x4c>
 478:	66 0f       	add	r22, r22
 47a:	77 1f       	adc	r23, r23
 47c:	88 1f       	adc	r24, r24
 47e:	99 1f       	adc	r25, r25
 480:	1a f0       	brmi	.+6      	; 0x488 <__fixunssfsi+0x24>
 482:	ba 95       	dec	r27
 484:	c9 f7       	brne	.-14     	; 0x478 <__fixunssfsi+0x14>
 486:	14 c0       	rjmp	.+40     	; 0x4b0 <__fixunssfsi+0x4c>
 488:	b1 30       	cpi	r27, 0x01	; 1
 48a:	91 f0       	breq	.+36     	; 0x4b0 <__fixunssfsi+0x4c>
 48c:	0e 94 a7 02 	call	0x54e	; 0x54e <__fp_zero>
 490:	b1 e0       	ldi	r27, 0x01	; 1
 492:	08 95       	ret
 494:	0c 94 a7 02 	jmp	0x54e	; 0x54e <__fp_zero>
 498:	67 2f       	mov	r22, r23
 49a:	78 2f       	mov	r23, r24
 49c:	88 27       	eor	r24, r24
 49e:	b8 5f       	subi	r27, 0xF8	; 248
 4a0:	39 f0       	breq	.+14     	; 0x4b0 <__fixunssfsi+0x4c>
 4a2:	b9 3f       	cpi	r27, 0xF9	; 249
 4a4:	cc f3       	brlt	.-14     	; 0x498 <__fixunssfsi+0x34>
 4a6:	86 95       	lsr	r24
 4a8:	77 95       	ror	r23
 4aa:	67 95       	ror	r22
 4ac:	b3 95       	inc	r27
 4ae:	d9 f7       	brne	.-10     	; 0x4a6 <__fixunssfsi+0x42>
 4b0:	3e f4       	brtc	.+14     	; 0x4c0 <__fixunssfsi+0x5c>
 4b2:	90 95       	com	r25
 4b4:	80 95       	com	r24
 4b6:	70 95       	com	r23
 4b8:	61 95       	neg	r22
 4ba:	7f 4f       	sbci	r23, 0xFF	; 255
 4bc:	8f 4f       	sbci	r24, 0xFF	; 255
 4be:	9f 4f       	sbci	r25, 0xFF	; 255
 4c0:	08 95       	ret

000004c2 <__fp_cmp>:
 4c2:	99 0f       	add	r25, r25
 4c4:	00 08       	sbc	r0, r0
 4c6:	55 0f       	add	r21, r21
 4c8:	aa 0b       	sbc	r26, r26
 4ca:	e0 e8       	ldi	r30, 0x80	; 128
 4cc:	fe ef       	ldi	r31, 0xFE	; 254
 4ce:	16 16       	cp	r1, r22
 4d0:	17 06       	cpc	r1, r23
 4d2:	e8 07       	cpc	r30, r24
 4d4:	f9 07       	cpc	r31, r25
 4d6:	c0 f0       	brcs	.+48     	; 0x508 <__fp_cmp+0x46>
 4d8:	12 16       	cp	r1, r18
 4da:	13 06       	cpc	r1, r19
 4dc:	e4 07       	cpc	r30, r20
 4de:	f5 07       	cpc	r31, r21
 4e0:	98 f0       	brcs	.+38     	; 0x508 <__fp_cmp+0x46>
 4e2:	62 1b       	sub	r22, r18
 4e4:	73 0b       	sbc	r23, r19
 4e6:	84 0b       	sbc	r24, r20
 4e8:	95 0b       	sbc	r25, r21
 4ea:	39 f4       	brne	.+14     	; 0x4fa <__fp_cmp+0x38>
 4ec:	0a 26       	eor	r0, r26
 4ee:	61 f0       	breq	.+24     	; 0x508 <__fp_cmp+0x46>
 4f0:	23 2b       	or	r18, r19
 4f2:	24 2b       	or	r18, r20
 4f4:	25 2b       	or	r18, r21
 4f6:	21 f4       	brne	.+8      	; 0x500 <__fp_cmp+0x3e>
 4f8:	08 95       	ret
 4fa:	0a 26       	eor	r0, r26
 4fc:	09 f4       	brne	.+2      	; 0x500 <__fp_cmp+0x3e>
 4fe:	a1 40       	sbci	r26, 0x01	; 1
 500:	a6 95       	lsr	r26
 502:	8f ef       	ldi	r24, 0xFF	; 255
 504:	81 1d       	adc	r24, r1
 506:	81 1d       	adc	r24, r1
 508:	08 95       	ret

0000050a <__fp_split3>:
 50a:	57 fd       	sbrc	r21, 7
 50c:	90 58       	subi	r25, 0x80	; 128
 50e:	44 0f       	add	r20, r20
 510:	55 1f       	adc	r21, r21
 512:	59 f0       	breq	.+22     	; 0x52a <__fp_splitA+0x10>
 514:	5f 3f       	cpi	r21, 0xFF	; 255
 516:	71 f0       	breq	.+28     	; 0x534 <__fp_splitA+0x1a>
 518:	47 95       	ror	r20

0000051a <__fp_splitA>:
 51a:	88 0f       	add	r24, r24
 51c:	97 fb       	bst	r25, 7
 51e:	99 1f       	adc	r25, r25
 520:	61 f0       	breq	.+24     	; 0x53a <__fp_splitA+0x20>
 522:	9f 3f       	cpi	r25, 0xFF	; 255
 524:	79 f0       	breq	.+30     	; 0x544 <__fp_splitA+0x2a>
 526:	87 95       	ror	r24
 528:	08 95       	ret
 52a:	12 16       	cp	r1, r18
 52c:	13 06       	cpc	r1, r19
 52e:	14 06       	cpc	r1, r20
 530:	55 1f       	adc	r21, r21
 532:	f2 cf       	rjmp	.-28     	; 0x518 <__fp_split3+0xe>
 534:	46 95       	lsr	r20
 536:	f1 df       	rcall	.-30     	; 0x51a <__fp_splitA>
 538:	08 c0       	rjmp	.+16     	; 0x54a <__fp_splitA+0x30>
 53a:	16 16       	cp	r1, r22
 53c:	17 06       	cpc	r1, r23
 53e:	18 06       	cpc	r1, r24
 540:	99 1f       	adc	r25, r25
 542:	f1 cf       	rjmp	.-30     	; 0x526 <__fp_splitA+0xc>
 544:	86 95       	lsr	r24
 546:	71 05       	cpc	r23, r1
 548:	61 05       	cpc	r22, r1
 54a:	08 94       	sec
 54c:	08 95       	ret

0000054e <__fp_zero>:
 54e:	e8 94       	clt

00000550 <__fp_szero>:
 550:	bb 27       	eor	r27, r27
 552:	66 27       	eor	r22, r22
 554:	77 27       	eor	r23, r23
 556:	cb 01       	movw	r24, r22
 558:	97 f9       	bld	r25, 7
 55a:	08 95       	ret

0000055c <__gesf2>:
 55c:	0e 94 61 02 	call	0x4c2	; 0x4c2 <__fp_cmp>
 560:	08 f4       	brcc	.+2      	; 0x564 <__gesf2+0x8>
 562:	8f ef       	ldi	r24, 0xFF	; 255
 564:	08 95       	ret

00000566 <__mulsf3>:
 566:	0e 94 c6 02 	call	0x58c	; 0x58c <__mulsf3x>
 56a:	0c 94 37 03 	jmp	0x66e	; 0x66e <__fp_round>
 56e:	0e 94 29 03 	call	0x652	; 0x652 <__fp_pscA>
 572:	38 f0       	brcs	.+14     	; 0x582 <__mulsf3+0x1c>
 574:	0e 94 30 03 	call	0x660	; 0x660 <__fp_pscB>
 578:	20 f0       	brcs	.+8      	; 0x582 <__mulsf3+0x1c>
 57a:	95 23       	and	r25, r21
 57c:	11 f0       	breq	.+4      	; 0x582 <__mulsf3+0x1c>
 57e:	0c 94 20 03 	jmp	0x640	; 0x640 <__fp_inf>
 582:	0c 94 26 03 	jmp	0x64c	; 0x64c <__fp_nan>
 586:	11 24       	eor	r1, r1
 588:	0c 94 a8 02 	jmp	0x550	; 0x550 <__fp_szero>

0000058c <__mulsf3x>:
 58c:	0e 94 85 02 	call	0x50a	; 0x50a <__fp_split3>
 590:	70 f3       	brcs	.-36     	; 0x56e <__mulsf3+0x8>

00000592 <__mulsf3_pse>:
 592:	95 9f       	mul	r25, r21
 594:	c1 f3       	breq	.-16     	; 0x586 <__mulsf3+0x20>
 596:	95 0f       	add	r25, r21
 598:	50 e0       	ldi	r21, 0x00	; 0
 59a:	55 1f       	adc	r21, r21
 59c:	62 9f       	mul	r22, r18
 59e:	f0 01       	movw	r30, r0
 5a0:	72 9f       	mul	r23, r18
 5a2:	bb 27       	eor	r27, r27
 5a4:	f0 0d       	add	r31, r0
 5a6:	b1 1d       	adc	r27, r1
 5a8:	63 9f       	mul	r22, r19
 5aa:	aa 27       	eor	r26, r26
 5ac:	f0 0d       	add	r31, r0
 5ae:	b1 1d       	adc	r27, r1
 5b0:	aa 1f       	adc	r26, r26
 5b2:	64 9f       	mul	r22, r20
 5b4:	66 27       	eor	r22, r22
 5b6:	b0 0d       	add	r27, r0
 5b8:	a1 1d       	adc	r26, r1
 5ba:	66 1f       	adc	r22, r22
 5bc:	82 9f       	mul	r24, r18
 5be:	22 27       	eor	r18, r18
 5c0:	b0 0d       	add	r27, r0
 5c2:	a1 1d       	adc	r26, r1
 5c4:	62 1f       	adc	r22, r18
 5c6:	73 9f       	mul	r23, r19
 5c8:	b0 0d       	add	r27, r0
 5ca:	a1 1d       	adc	r26, r1
 5cc:	62 1f       	adc	r22, r18
 5ce:	83 9f       	mul	r24, r19
 5d0:	a0 0d       	add	r26, r0
 5d2:	61 1d       	adc	r22, r1
 5d4:	22 1f       	adc	r18, r18
 5d6:	74 9f       	mul	r23, r20
 5d8:	33 27       	eor	r19, r19
 5da:	a0 0d       	add	r26, r0
 5dc:	61 1d       	adc	r22, r1
 5de:	23 1f       	adc	r18, r19
 5e0:	84 9f       	mul	r24, r20
 5e2:	60 0d       	add	r22, r0
 5e4:	21 1d       	adc	r18, r1
 5e6:	82 2f       	mov	r24, r18
 5e8:	76 2f       	mov	r23, r22
 5ea:	6a 2f       	mov	r22, r26
 5ec:	11 24       	eor	r1, r1
 5ee:	9f 57       	subi	r25, 0x7F	; 127
 5f0:	50 40       	sbci	r21, 0x00	; 0
 5f2:	9a f0       	brmi	.+38     	; 0x61a <__mulsf3_pse+0x88>
 5f4:	f1 f0       	breq	.+60     	; 0x632 <__mulsf3_pse+0xa0>
 5f6:	88 23       	and	r24, r24
 5f8:	4a f0       	brmi	.+18     	; 0x60c <__mulsf3_pse+0x7a>
 5fa:	ee 0f       	add	r30, r30
 5fc:	ff 1f       	adc	r31, r31
 5fe:	bb 1f       	adc	r27, r27
 600:	66 1f       	adc	r22, r22
 602:	77 1f       	adc	r23, r23
 604:	88 1f       	adc	r24, r24
 606:	91 50       	subi	r25, 0x01	; 1
 608:	50 40       	sbci	r21, 0x00	; 0
 60a:	a9 f7       	brne	.-22     	; 0x5f6 <__mulsf3_pse+0x64>
 60c:	9e 3f       	cpi	r25, 0xFE	; 254
 60e:	51 05       	cpc	r21, r1
 610:	80 f0       	brcs	.+32     	; 0x632 <__mulsf3_pse+0xa0>
 612:	0c 94 20 03 	jmp	0x640	; 0x640 <__fp_inf>
 616:	0c 94 a8 02 	jmp	0x550	; 0x550 <__fp_szero>
 61a:	5f 3f       	cpi	r21, 0xFF	; 255
 61c:	e4 f3       	brlt	.-8      	; 0x616 <__mulsf3_pse+0x84>
 61e:	98 3e       	cpi	r25, 0xE8	; 232
 620:	d4 f3       	brlt	.-12     	; 0x616 <__mulsf3_pse+0x84>
 622:	86 95       	lsr	r24
 624:	77 95       	ror	r23
 626:	67 95       	ror	r22
 628:	b7 95       	ror	r27
 62a:	f7 95       	ror	r31
 62c:	e7 95       	ror	r30
 62e:	9f 5f       	subi	r25, 0xFF	; 255
 630:	c1 f7       	brne	.-16     	; 0x622 <__mulsf3_pse+0x90>
 632:	fe 2b       	or	r31, r30
 634:	88 0f       	add	r24, r24
 636:	91 1d       	adc	r25, r1
 638:	96 95       	lsr	r25
 63a:	87 95       	ror	r24
 63c:	97 f9       	bld	r25, 7
 63e:	08 95       	ret

00000640 <__fp_inf>:
 640:	97 f9       	bld	r25, 7
 642:	9f 67       	ori	r25, 0x7F	; 127
 644:	80 e8       	ldi	r24, 0x80	; 128
 646:	70 e0       	ldi	r23, 0x00	; 0
 648:	60 e0       	ldi	r22, 0x00	; 0
 64a:	08 95       	ret

0000064c <__fp_nan>:
 64c:	9f ef       	ldi	r25, 0xFF	; 255
 64e:	80 ec       	ldi	r24, 0xC0	; 192
 650:	08 95       	ret

00000652 <__fp_pscA>:
 652:	00 24       	eor	r0, r0
 654:	0a 94       	dec	r0
 656:	16 16       	cp	r1, r22
 658:	17 06       	cpc	r1, r23
 65a:	18 06       	cpc	r1, r24
 65c:	09 06       	cpc	r0, r25
 65e:	08 95       	ret

00000660 <__fp_pscB>:
 660:	00 24       	eor	r0, r0
 662:	0a 94       	dec	r0
 664:	12 16       	cp	r1, r18
 666:	13 06       	cpc	r1, r19
 668:	14 06       	cpc	r1, r20
 66a:	05 06       	cpc	r0, r21
 66c:	08 95       	ret

0000066e <__fp_round>:
 66e:	09 2e       	mov	r0, r25
 670:	03 94       	inc	r0
 672:	00 0c       	add	r0, r0
 674:	11 f4       	brne	.+4      	; 0x67a <__fp_round+0xc>
 676:	88 23       	and	r24, r24
 678:	52 f0       	brmi	.+20     	; 0x68e <__fp_round+0x20>
 67a:	bb 0f       	add	r27, r27
 67c:	40 f4       	brcc	.+16     	; 0x68e <__fp_round+0x20>
 67e:	bf 2b       	or	r27, r31
 680:	11 f4       	brne	.+4      	; 0x686 <__fp_round+0x18>
 682:	60 ff       	sbrs	r22, 0
 684:	04 c0       	rjmp	.+8      	; 0x68e <__fp_round+0x20>
 686:	6f 5f       	subi	r22, 0xFF	; 255
 688:	7f 4f       	sbci	r23, 0xFF	; 255
 68a:	8f 4f       	sbci	r24, 0xFF	; 255
 68c:	9f 4f       	sbci	r25, 0xFF	; 255
 68e:	08 95       	ret

00000690 <_exit>:
 690:	f8 94       	cli

00000692 <__stop_program>:
 692:	ff cf       	rjmp	.-2      	; 0x692 <__stop_program>
